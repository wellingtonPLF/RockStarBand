
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Auth_roles
 * 
 */
export type Auth_roles = $Result.DefaultSelection<Prisma.$Auth_rolesPayload>
/**
 * Model Auths
 * 
 */
export type Auths = $Result.DefaultSelection<Prisma.$AuthsPayload>
/**
 * Model Events
 * 
 */
export type Events = $Result.DefaultSelection<Prisma.$EventsPayload>
/**
 * Model Roles
 * 
 */
export type Roles = $Result.DefaultSelection<Prisma.$RolesPayload>
/**
 * Model Ticket_type
 * 
 */
export type Ticket_type = $Result.DefaultSelection<Prisma.$Ticket_typePayload>
/**
 * Model Ticket_user
 * 
 */
export type Ticket_user = $Result.DefaultSelection<Prisma.$Ticket_userPayload>
/**
 * Model Tickets
 * 
 */
export type Tickets = $Result.DefaultSelection<Prisma.$TicketsPayload>
/**
 * Model Tokens
 * 
 */
export type Tokens = $Result.DefaultSelection<Prisma.$TokensPayload>
/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Countries
 * 
 */
export type Countries = $Result.DefaultSelection<Prisma.$CountriesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const RoleNames: {
  ROLE_ADMIN: 'ROLE_ADMIN',
  ROLE_USER: 'ROLE_USER'
};

export type RoleNames = (typeof RoleNames)[keyof typeof RoleNames]

}

export type RoleNames = $Enums.RoleNames

export const RoleNames: typeof $Enums.RoleNames

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Auth_roles
 * const auth_roles = await prisma.auth_roles.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Auth_roles
   * const auth_roles = await prisma.auth_roles.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.auth_roles`: Exposes CRUD operations for the **Auth_roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auth_roles
    * const auth_roles = await prisma.auth_roles.findMany()
    * ```
    */
  get auth_roles(): Prisma.Auth_rolesDelegate<ExtArgs>;

  /**
   * `prisma.auths`: Exposes CRUD operations for the **Auths** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auths
    * const auths = await prisma.auths.findMany()
    * ```
    */
  get auths(): Prisma.AuthsDelegate<ExtArgs>;

  /**
   * `prisma.events`: Exposes CRUD operations for the **Events** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.events.findMany()
    * ```
    */
  get events(): Prisma.EventsDelegate<ExtArgs>;

  /**
   * `prisma.roles`: Exposes CRUD operations for the **Roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.roles.findMany()
    * ```
    */
  get roles(): Prisma.RolesDelegate<ExtArgs>;

  /**
   * `prisma.ticket_type`: Exposes CRUD operations for the **Ticket_type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ticket_types
    * const ticket_types = await prisma.ticket_type.findMany()
    * ```
    */
  get ticket_type(): Prisma.Ticket_typeDelegate<ExtArgs>;

  /**
   * `prisma.ticket_user`: Exposes CRUD operations for the **Ticket_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ticket_users
    * const ticket_users = await prisma.ticket_user.findMany()
    * ```
    */
  get ticket_user(): Prisma.Ticket_userDelegate<ExtArgs>;

  /**
   * `prisma.tickets`: Exposes CRUD operations for the **Tickets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.tickets.findMany()
    * ```
    */
  get tickets(): Prisma.TicketsDelegate<ExtArgs>;

  /**
   * `prisma.tokens`: Exposes CRUD operations for the **Tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.tokens.findMany()
    * ```
    */
  get tokens(): Prisma.TokensDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.countries`: Exposes CRUD operations for the **Countries** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.countries.findMany()
    * ```
    */
  get countries(): Prisma.CountriesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.0
   * Query Engine version: 5fe21811a6ba0b952a3bc71400666511fe3b902f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Auth_roles: 'Auth_roles',
    Auths: 'Auths',
    Events: 'Events',
    Roles: 'Roles',
    Ticket_type: 'Ticket_type',
    Ticket_user: 'Ticket_user',
    Tickets: 'Tickets',
    Tokens: 'Tokens',
    Users: 'Users',
    Countries: 'Countries'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "auth_roles" | "auths" | "events" | "roles" | "ticket_type" | "ticket_user" | "tickets" | "tokens" | "users" | "countries"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Auth_roles: {
        payload: Prisma.$Auth_rolesPayload<ExtArgs>
        fields: Prisma.Auth_rolesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Auth_rolesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Auth_rolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Auth_rolesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Auth_rolesPayload>
          }
          findFirst: {
            args: Prisma.Auth_rolesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Auth_rolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Auth_rolesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Auth_rolesPayload>
          }
          findMany: {
            args: Prisma.Auth_rolesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Auth_rolesPayload>[]
          }
          create: {
            args: Prisma.Auth_rolesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Auth_rolesPayload>
          }
          createMany: {
            args: Prisma.Auth_rolesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Auth_rolesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Auth_rolesPayload>[]
          }
          delete: {
            args: Prisma.Auth_rolesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Auth_rolesPayload>
          }
          update: {
            args: Prisma.Auth_rolesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Auth_rolesPayload>
          }
          deleteMany: {
            args: Prisma.Auth_rolesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Auth_rolesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Auth_rolesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Auth_rolesPayload>
          }
          aggregate: {
            args: Prisma.Auth_rolesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuth_roles>
          }
          groupBy: {
            args: Prisma.Auth_rolesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Auth_rolesGroupByOutputType>[]
          }
          count: {
            args: Prisma.Auth_rolesCountArgs<ExtArgs>
            result: $Utils.Optional<Auth_rolesCountAggregateOutputType> | number
          }
        }
      }
      Auths: {
        payload: Prisma.$AuthsPayload<ExtArgs>
        fields: Prisma.AuthsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthsPayload>
          }
          findFirst: {
            args: Prisma.AuthsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthsPayload>
          }
          findMany: {
            args: Prisma.AuthsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthsPayload>[]
          }
          create: {
            args: Prisma.AuthsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthsPayload>
          }
          createMany: {
            args: Prisma.AuthsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuthsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthsPayload>[]
          }
          delete: {
            args: Prisma.AuthsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthsPayload>
          }
          update: {
            args: Prisma.AuthsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthsPayload>
          }
          deleteMany: {
            args: Prisma.AuthsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuthsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthsPayload>
          }
          aggregate: {
            args: Prisma.AuthsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuths>
          }
          groupBy: {
            args: Prisma.AuthsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthsCountArgs<ExtArgs>
            result: $Utils.Optional<AuthsCountAggregateOutputType> | number
          }
        }
      }
      Events: {
        payload: Prisma.$EventsPayload<ExtArgs>
        fields: Prisma.EventsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          findFirst: {
            args: Prisma.EventsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          findMany: {
            args: Prisma.EventsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>[]
          }
          create: {
            args: Prisma.EventsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          createMany: {
            args: Prisma.EventsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>[]
          }
          delete: {
            args: Prisma.EventsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          update: {
            args: Prisma.EventsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          deleteMany: {
            args: Prisma.EventsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          aggregate: {
            args: Prisma.EventsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvents>
          }
          groupBy: {
            args: Prisma.EventsGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventsCountArgs<ExtArgs>
            result: $Utils.Optional<EventsCountAggregateOutputType> | number
          }
        }
      }
      Roles: {
        payload: Prisma.$RolesPayload<ExtArgs>
        fields: Prisma.RolesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          findFirst: {
            args: Prisma.RolesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          findMany: {
            args: Prisma.RolesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>[]
          }
          create: {
            args: Prisma.RolesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          createMany: {
            args: Prisma.RolesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RolesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>[]
          }
          delete: {
            args: Prisma.RolesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          update: {
            args: Prisma.RolesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          deleteMany: {
            args: Prisma.RolesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RolesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolesPayload>
          }
          aggregate: {
            args: Prisma.RolesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoles>
          }
          groupBy: {
            args: Prisma.RolesGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolesGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolesCountArgs<ExtArgs>
            result: $Utils.Optional<RolesCountAggregateOutputType> | number
          }
        }
      }
      Ticket_type: {
        payload: Prisma.$Ticket_typePayload<ExtArgs>
        fields: Prisma.Ticket_typeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Ticket_typeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_typePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Ticket_typeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_typePayload>
          }
          findFirst: {
            args: Prisma.Ticket_typeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_typePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Ticket_typeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_typePayload>
          }
          findMany: {
            args: Prisma.Ticket_typeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_typePayload>[]
          }
          create: {
            args: Prisma.Ticket_typeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_typePayload>
          }
          createMany: {
            args: Prisma.Ticket_typeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Ticket_typeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_typePayload>[]
          }
          delete: {
            args: Prisma.Ticket_typeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_typePayload>
          }
          update: {
            args: Prisma.Ticket_typeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_typePayload>
          }
          deleteMany: {
            args: Prisma.Ticket_typeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Ticket_typeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Ticket_typeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_typePayload>
          }
          aggregate: {
            args: Prisma.Ticket_typeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket_type>
          }
          groupBy: {
            args: Prisma.Ticket_typeGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ticket_typeGroupByOutputType>[]
          }
          count: {
            args: Prisma.Ticket_typeCountArgs<ExtArgs>
            result: $Utils.Optional<Ticket_typeCountAggregateOutputType> | number
          }
        }
      }
      Ticket_user: {
        payload: Prisma.$Ticket_userPayload<ExtArgs>
        fields: Prisma.Ticket_userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Ticket_userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Ticket_userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_userPayload>
          }
          findFirst: {
            args: Prisma.Ticket_userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Ticket_userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_userPayload>
          }
          findMany: {
            args: Prisma.Ticket_userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_userPayload>[]
          }
          create: {
            args: Prisma.Ticket_userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_userPayload>
          }
          createMany: {
            args: Prisma.Ticket_userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Ticket_userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_userPayload>[]
          }
          delete: {
            args: Prisma.Ticket_userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_userPayload>
          }
          update: {
            args: Prisma.Ticket_userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_userPayload>
          }
          deleteMany: {
            args: Prisma.Ticket_userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Ticket_userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Ticket_userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Ticket_userPayload>
          }
          aggregate: {
            args: Prisma.Ticket_userAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket_user>
          }
          groupBy: {
            args: Prisma.Ticket_userGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ticket_userGroupByOutputType>[]
          }
          count: {
            args: Prisma.Ticket_userCountArgs<ExtArgs>
            result: $Utils.Optional<Ticket_userCountAggregateOutputType> | number
          }
        }
      }
      Tickets: {
        payload: Prisma.$TicketsPayload<ExtArgs>
        fields: Prisma.TicketsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          findFirst: {
            args: Prisma.TicketsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          findMany: {
            args: Prisma.TicketsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>[]
          }
          create: {
            args: Prisma.TicketsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          createMany: {
            args: Prisma.TicketsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>[]
          }
          delete: {
            args: Prisma.TicketsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          update: {
            args: Prisma.TicketsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          deleteMany: {
            args: Prisma.TicketsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          aggregate: {
            args: Prisma.TicketsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTickets>
          }
          groupBy: {
            args: Prisma.TicketsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketsCountArgs<ExtArgs>
            result: $Utils.Optional<TicketsCountAggregateOutputType> | number
          }
        }
      }
      Tokens: {
        payload: Prisma.$TokensPayload<ExtArgs>
        fields: Prisma.TokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          findFirst: {
            args: Prisma.TokensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          findMany: {
            args: Prisma.TokensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>[]
          }
          create: {
            args: Prisma.TokensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          createMany: {
            args: Prisma.TokensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokensCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>[]
          }
          delete: {
            args: Prisma.TokensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          update: {
            args: Prisma.TokensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          deleteMany: {
            args: Prisma.TokensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TokensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokensPayload>
          }
          aggregate: {
            args: Prisma.TokensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTokens>
          }
          groupBy: {
            args: Prisma.TokensGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokensCountArgs<ExtArgs>
            result: $Utils.Optional<TokensCountAggregateOutputType> | number
          }
        }
      }
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Countries: {
        payload: Prisma.$CountriesPayload<ExtArgs>
        fields: Prisma.CountriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountriesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountriesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountriesPayload>
          }
          findFirst: {
            args: Prisma.CountriesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountriesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountriesPayload>
          }
          findMany: {
            args: Prisma.CountriesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountriesPayload>[]
          }
          create: {
            args: Prisma.CountriesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountriesPayload>
          }
          createMany: {
            args: Prisma.CountriesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CountriesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountriesPayload>[]
          }
          delete: {
            args: Prisma.CountriesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountriesPayload>
          }
          update: {
            args: Prisma.CountriesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountriesPayload>
          }
          deleteMany: {
            args: Prisma.CountriesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CountriesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CountriesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountriesPayload>
          }
          aggregate: {
            args: Prisma.CountriesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCountries>
          }
          groupBy: {
            args: Prisma.CountriesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CountriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountriesCountArgs<ExtArgs>
            result: $Utils.Optional<CountriesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AuthsCountOutputType
   */

  export type AuthsCountOutputType = {
    auth_roles: number
  }

  export type AuthsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auth_roles?: boolean | AuthsCountOutputTypeCountAuth_rolesArgs
  }

  // Custom InputTypes
  /**
   * AuthsCountOutputType without action
   */
  export type AuthsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthsCountOutputType
     */
    select?: AuthsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AuthsCountOutputType without action
   */
  export type AuthsCountOutputTypeCountAuth_rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Auth_rolesWhereInput
  }


  /**
   * Count Type EventsCountOutputType
   */

  export type EventsCountOutputType = {
    tickets: number
  }

  export type EventsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | EventsCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * EventsCountOutputType without action
   */
  export type EventsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCountOutputType
     */
    select?: EventsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventsCountOutputType without action
   */
  export type EventsCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsWhereInput
  }


  /**
   * Count Type RolesCountOutputType
   */

  export type RolesCountOutputType = {
    auth_roles: number
  }

  export type RolesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auth_roles?: boolean | RolesCountOutputTypeCountAuth_rolesArgs
  }

  // Custom InputTypes
  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolesCountOutputType
     */
    select?: RolesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeCountAuth_rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Auth_rolesWhereInput
  }


  /**
   * Count Type Ticket_typeCountOutputType
   */

  export type Ticket_typeCountOutputType = {
    tickets: number
  }

  export type Ticket_typeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | Ticket_typeCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * Ticket_typeCountOutputType without action
   */
  export type Ticket_typeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_typeCountOutputType
     */
    select?: Ticket_typeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Ticket_typeCountOutputType without action
   */
  export type Ticket_typeCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsWhereInput
  }


  /**
   * Count Type TicketsCountOutputType
   */

  export type TicketsCountOutputType = {
    ticket_user: number
  }

  export type TicketsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket_user?: boolean | TicketsCountOutputTypeCountTicket_userArgs
  }

  // Custom InputTypes
  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsCountOutputType
     */
    select?: TicketsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeCountTicket_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Ticket_userWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Auth_roles
   */

  export type AggregateAuth_roles = {
    _count: Auth_rolesCountAggregateOutputType | null
    _avg: Auth_rolesAvgAggregateOutputType | null
    _sum: Auth_rolesSumAggregateOutputType | null
    _min: Auth_rolesMinAggregateOutputType | null
    _max: Auth_rolesMaxAggregateOutputType | null
  }

  export type Auth_rolesAvgAggregateOutputType = {
    auth_id: number | null
    role_id: number | null
  }

  export type Auth_rolesSumAggregateOutputType = {
    auth_id: number | null
    role_id: number | null
  }

  export type Auth_rolesMinAggregateOutputType = {
    auth_id: number | null
    role_id: number | null
  }

  export type Auth_rolesMaxAggregateOutputType = {
    auth_id: number | null
    role_id: number | null
  }

  export type Auth_rolesCountAggregateOutputType = {
    auth_id: number
    role_id: number
    _all: number
  }


  export type Auth_rolesAvgAggregateInputType = {
    auth_id?: true
    role_id?: true
  }

  export type Auth_rolesSumAggregateInputType = {
    auth_id?: true
    role_id?: true
  }

  export type Auth_rolesMinAggregateInputType = {
    auth_id?: true
    role_id?: true
  }

  export type Auth_rolesMaxAggregateInputType = {
    auth_id?: true
    role_id?: true
  }

  export type Auth_rolesCountAggregateInputType = {
    auth_id?: true
    role_id?: true
    _all?: true
  }

  export type Auth_rolesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auth_roles to aggregate.
     */
    where?: Auth_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auth_roles to fetch.
     */
    orderBy?: Auth_rolesOrderByWithRelationInput | Auth_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Auth_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auth_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auth_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Auth_roles
    **/
    _count?: true | Auth_rolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Auth_rolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Auth_rolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Auth_rolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Auth_rolesMaxAggregateInputType
  }

  export type GetAuth_rolesAggregateType<T extends Auth_rolesAggregateArgs> = {
        [P in keyof T & keyof AggregateAuth_roles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuth_roles[P]>
      : GetScalarType<T[P], AggregateAuth_roles[P]>
  }




  export type Auth_rolesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Auth_rolesWhereInput
    orderBy?: Auth_rolesOrderByWithAggregationInput | Auth_rolesOrderByWithAggregationInput[]
    by: Auth_rolesScalarFieldEnum[] | Auth_rolesScalarFieldEnum
    having?: Auth_rolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Auth_rolesCountAggregateInputType | true
    _avg?: Auth_rolesAvgAggregateInputType
    _sum?: Auth_rolesSumAggregateInputType
    _min?: Auth_rolesMinAggregateInputType
    _max?: Auth_rolesMaxAggregateInputType
  }

  export type Auth_rolesGroupByOutputType = {
    auth_id: number
    role_id: number
    _count: Auth_rolesCountAggregateOutputType | null
    _avg: Auth_rolesAvgAggregateOutputType | null
    _sum: Auth_rolesSumAggregateOutputType | null
    _min: Auth_rolesMinAggregateOutputType | null
    _max: Auth_rolesMaxAggregateOutputType | null
  }

  type GetAuth_rolesGroupByPayload<T extends Auth_rolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Auth_rolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Auth_rolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Auth_rolesGroupByOutputType[P]>
            : GetScalarType<T[P], Auth_rolesGroupByOutputType[P]>
        }
      >
    >


  export type Auth_rolesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    auth_id?: boolean
    role_id?: boolean
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
    roles?: boolean | RolesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auth_roles"]>

  export type Auth_rolesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    auth_id?: boolean
    role_id?: boolean
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
    roles?: boolean | RolesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auth_roles"]>

  export type Auth_rolesSelectScalar = {
    auth_id?: boolean
    role_id?: boolean
  }

  export type Auth_rolesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
    roles?: boolean | RolesDefaultArgs<ExtArgs>
  }
  export type Auth_rolesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
    roles?: boolean | RolesDefaultArgs<ExtArgs>
  }

  export type $Auth_rolesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Auth_roles"
    objects: {
      auths: Prisma.$AuthsPayload<ExtArgs>
      roles: Prisma.$RolesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      auth_id: number
      role_id: number
    }, ExtArgs["result"]["auth_roles"]>
    composites: {}
  }

  type Auth_rolesGetPayload<S extends boolean | null | undefined | Auth_rolesDefaultArgs> = $Result.GetResult<Prisma.$Auth_rolesPayload, S>

  type Auth_rolesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Auth_rolesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Auth_rolesCountAggregateInputType | true
    }

  export interface Auth_rolesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Auth_roles'], meta: { name: 'Auth_roles' } }
    /**
     * Find zero or one Auth_roles that matches the filter.
     * @param {Auth_rolesFindUniqueArgs} args - Arguments to find a Auth_roles
     * @example
     * // Get one Auth_roles
     * const auth_roles = await prisma.auth_roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Auth_rolesFindUniqueArgs>(args: SelectSubset<T, Auth_rolesFindUniqueArgs<ExtArgs>>): Prisma__Auth_rolesClient<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Auth_roles that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {Auth_rolesFindUniqueOrThrowArgs} args - Arguments to find a Auth_roles
     * @example
     * // Get one Auth_roles
     * const auth_roles = await prisma.auth_roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Auth_rolesFindUniqueOrThrowArgs>(args: SelectSubset<T, Auth_rolesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Auth_rolesClient<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Auth_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Auth_rolesFindFirstArgs} args - Arguments to find a Auth_roles
     * @example
     * // Get one Auth_roles
     * const auth_roles = await prisma.auth_roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Auth_rolesFindFirstArgs>(args?: SelectSubset<T, Auth_rolesFindFirstArgs<ExtArgs>>): Prisma__Auth_rolesClient<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Auth_roles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Auth_rolesFindFirstOrThrowArgs} args - Arguments to find a Auth_roles
     * @example
     * // Get one Auth_roles
     * const auth_roles = await prisma.auth_roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Auth_rolesFindFirstOrThrowArgs>(args?: SelectSubset<T, Auth_rolesFindFirstOrThrowArgs<ExtArgs>>): Prisma__Auth_rolesClient<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Auth_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Auth_rolesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auth_roles
     * const auth_roles = await prisma.auth_roles.findMany()
     * 
     * // Get first 10 Auth_roles
     * const auth_roles = await prisma.auth_roles.findMany({ take: 10 })
     * 
     * // Only select the `auth_id`
     * const auth_rolesWithAuth_idOnly = await prisma.auth_roles.findMany({ select: { auth_id: true } })
     * 
     */
    findMany<T extends Auth_rolesFindManyArgs>(args?: SelectSubset<T, Auth_rolesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Auth_roles.
     * @param {Auth_rolesCreateArgs} args - Arguments to create a Auth_roles.
     * @example
     * // Create one Auth_roles
     * const Auth_roles = await prisma.auth_roles.create({
     *   data: {
     *     // ... data to create a Auth_roles
     *   }
     * })
     * 
     */
    create<T extends Auth_rolesCreateArgs>(args: SelectSubset<T, Auth_rolesCreateArgs<ExtArgs>>): Prisma__Auth_rolesClient<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Auth_roles.
     * @param {Auth_rolesCreateManyArgs} args - Arguments to create many Auth_roles.
     * @example
     * // Create many Auth_roles
     * const auth_roles = await prisma.auth_roles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Auth_rolesCreateManyArgs>(args?: SelectSubset<T, Auth_rolesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Auth_roles and returns the data saved in the database.
     * @param {Auth_rolesCreateManyAndReturnArgs} args - Arguments to create many Auth_roles.
     * @example
     * // Create many Auth_roles
     * const auth_roles = await prisma.auth_roles.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Auth_roles and only return the `auth_id`
     * const auth_rolesWithAuth_idOnly = await prisma.auth_roles.createManyAndReturn({ 
     *   select: { auth_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Auth_rolesCreateManyAndReturnArgs>(args?: SelectSubset<T, Auth_rolesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Auth_roles.
     * @param {Auth_rolesDeleteArgs} args - Arguments to delete one Auth_roles.
     * @example
     * // Delete one Auth_roles
     * const Auth_roles = await prisma.auth_roles.delete({
     *   where: {
     *     // ... filter to delete one Auth_roles
     *   }
     * })
     * 
     */
    delete<T extends Auth_rolesDeleteArgs>(args: SelectSubset<T, Auth_rolesDeleteArgs<ExtArgs>>): Prisma__Auth_rolesClient<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Auth_roles.
     * @param {Auth_rolesUpdateArgs} args - Arguments to update one Auth_roles.
     * @example
     * // Update one Auth_roles
     * const auth_roles = await prisma.auth_roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Auth_rolesUpdateArgs>(args: SelectSubset<T, Auth_rolesUpdateArgs<ExtArgs>>): Prisma__Auth_rolesClient<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Auth_roles.
     * @param {Auth_rolesDeleteManyArgs} args - Arguments to filter Auth_roles to delete.
     * @example
     * // Delete a few Auth_roles
     * const { count } = await prisma.auth_roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Auth_rolesDeleteManyArgs>(args?: SelectSubset<T, Auth_rolesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auth_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Auth_rolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auth_roles
     * const auth_roles = await prisma.auth_roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Auth_rolesUpdateManyArgs>(args: SelectSubset<T, Auth_rolesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Auth_roles.
     * @param {Auth_rolesUpsertArgs} args - Arguments to update or create a Auth_roles.
     * @example
     * // Update or create a Auth_roles
     * const auth_roles = await prisma.auth_roles.upsert({
     *   create: {
     *     // ... data to create a Auth_roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auth_roles we want to update
     *   }
     * })
     */
    upsert<T extends Auth_rolesUpsertArgs>(args: SelectSubset<T, Auth_rolesUpsertArgs<ExtArgs>>): Prisma__Auth_rolesClient<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Auth_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Auth_rolesCountArgs} args - Arguments to filter Auth_roles to count.
     * @example
     * // Count the number of Auth_roles
     * const count = await prisma.auth_roles.count({
     *   where: {
     *     // ... the filter for the Auth_roles we want to count
     *   }
     * })
    **/
    count<T extends Auth_rolesCountArgs>(
      args?: Subset<T, Auth_rolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Auth_rolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auth_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Auth_rolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Auth_rolesAggregateArgs>(args: Subset<T, Auth_rolesAggregateArgs>): Prisma.PrismaPromise<GetAuth_rolesAggregateType<T>>

    /**
     * Group by Auth_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Auth_rolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Auth_rolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Auth_rolesGroupByArgs['orderBy'] }
        : { orderBy?: Auth_rolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Auth_rolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuth_rolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Auth_roles model
   */
  readonly fields: Auth_rolesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Auth_roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Auth_rolesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auths<T extends AuthsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuthsDefaultArgs<ExtArgs>>): Prisma__AuthsClient<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    roles<T extends RolesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RolesDefaultArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Auth_roles model
   */ 
  interface Auth_rolesFieldRefs {
    readonly auth_id: FieldRef<"Auth_roles", 'Int'>
    readonly role_id: FieldRef<"Auth_roles", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Auth_roles findUnique
   */
  export type Auth_rolesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
    /**
     * Filter, which Auth_roles to fetch.
     */
    where: Auth_rolesWhereUniqueInput
  }

  /**
   * Auth_roles findUniqueOrThrow
   */
  export type Auth_rolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
    /**
     * Filter, which Auth_roles to fetch.
     */
    where: Auth_rolesWhereUniqueInput
  }

  /**
   * Auth_roles findFirst
   */
  export type Auth_rolesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
    /**
     * Filter, which Auth_roles to fetch.
     */
    where?: Auth_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auth_roles to fetch.
     */
    orderBy?: Auth_rolesOrderByWithRelationInput | Auth_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auth_roles.
     */
    cursor?: Auth_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auth_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auth_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auth_roles.
     */
    distinct?: Auth_rolesScalarFieldEnum | Auth_rolesScalarFieldEnum[]
  }

  /**
   * Auth_roles findFirstOrThrow
   */
  export type Auth_rolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
    /**
     * Filter, which Auth_roles to fetch.
     */
    where?: Auth_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auth_roles to fetch.
     */
    orderBy?: Auth_rolesOrderByWithRelationInput | Auth_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auth_roles.
     */
    cursor?: Auth_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auth_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auth_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auth_roles.
     */
    distinct?: Auth_rolesScalarFieldEnum | Auth_rolesScalarFieldEnum[]
  }

  /**
   * Auth_roles findMany
   */
  export type Auth_rolesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
    /**
     * Filter, which Auth_roles to fetch.
     */
    where?: Auth_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auth_roles to fetch.
     */
    orderBy?: Auth_rolesOrderByWithRelationInput | Auth_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Auth_roles.
     */
    cursor?: Auth_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auth_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auth_roles.
     */
    skip?: number
    distinct?: Auth_rolesScalarFieldEnum | Auth_rolesScalarFieldEnum[]
  }

  /**
   * Auth_roles create
   */
  export type Auth_rolesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
    /**
     * The data needed to create a Auth_roles.
     */
    data: XOR<Auth_rolesCreateInput, Auth_rolesUncheckedCreateInput>
  }

  /**
   * Auth_roles createMany
   */
  export type Auth_rolesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Auth_roles.
     */
    data: Auth_rolesCreateManyInput | Auth_rolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Auth_roles createManyAndReturn
   */
  export type Auth_rolesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Auth_roles.
     */
    data: Auth_rolesCreateManyInput | Auth_rolesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Auth_roles update
   */
  export type Auth_rolesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
    /**
     * The data needed to update a Auth_roles.
     */
    data: XOR<Auth_rolesUpdateInput, Auth_rolesUncheckedUpdateInput>
    /**
     * Choose, which Auth_roles to update.
     */
    where: Auth_rolesWhereUniqueInput
  }

  /**
   * Auth_roles updateMany
   */
  export type Auth_rolesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Auth_roles.
     */
    data: XOR<Auth_rolesUpdateManyMutationInput, Auth_rolesUncheckedUpdateManyInput>
    /**
     * Filter which Auth_roles to update
     */
    where?: Auth_rolesWhereInput
  }

  /**
   * Auth_roles upsert
   */
  export type Auth_rolesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
    /**
     * The filter to search for the Auth_roles to update in case it exists.
     */
    where: Auth_rolesWhereUniqueInput
    /**
     * In case the Auth_roles found by the `where` argument doesn't exist, create a new Auth_roles with this data.
     */
    create: XOR<Auth_rolesCreateInput, Auth_rolesUncheckedCreateInput>
    /**
     * In case the Auth_roles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Auth_rolesUpdateInput, Auth_rolesUncheckedUpdateInput>
  }

  /**
   * Auth_roles delete
   */
  export type Auth_rolesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
    /**
     * Filter which Auth_roles to delete.
     */
    where: Auth_rolesWhereUniqueInput
  }

  /**
   * Auth_roles deleteMany
   */
  export type Auth_rolesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auth_roles to delete
     */
    where?: Auth_rolesWhereInput
  }

  /**
   * Auth_roles without action
   */
  export type Auth_rolesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
  }


  /**
   * Model Auths
   */

  export type AggregateAuths = {
    _count: AuthsCountAggregateOutputType | null
    _avg: AuthsAvgAggregateOutputType | null
    _sum: AuthsSumAggregateOutputType | null
    _min: AuthsMinAggregateOutputType | null
    _max: AuthsMaxAggregateOutputType | null
  }

  export type AuthsAvgAggregateOutputType = {
    id: number | null
  }

  export type AuthsSumAggregateOutputType = {
    id: number | null
  }

  export type AuthsMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    active: boolean | null
    password: string | null
  }

  export type AuthsMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    active: boolean | null
    password: string | null
  }

  export type AuthsCountAggregateOutputType = {
    id: number
    username: number
    email: number
    active: number
    password: number
    _all: number
  }


  export type AuthsAvgAggregateInputType = {
    id?: true
  }

  export type AuthsSumAggregateInputType = {
    id?: true
  }

  export type AuthsMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    active?: true
    password?: true
  }

  export type AuthsMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    active?: true
    password?: true
  }

  export type AuthsCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    active?: true
    password?: true
    _all?: true
  }

  export type AuthsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auths to aggregate.
     */
    where?: AuthsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthsOrderByWithRelationInput | AuthsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Auths
    **/
    _count?: true | AuthsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthsMaxAggregateInputType
  }

  export type GetAuthsAggregateType<T extends AuthsAggregateArgs> = {
        [P in keyof T & keyof AggregateAuths]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuths[P]>
      : GetScalarType<T[P], AggregateAuths[P]>
  }




  export type AuthsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthsWhereInput
    orderBy?: AuthsOrderByWithAggregationInput | AuthsOrderByWithAggregationInput[]
    by: AuthsScalarFieldEnum[] | AuthsScalarFieldEnum
    having?: AuthsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthsCountAggregateInputType | true
    _avg?: AuthsAvgAggregateInputType
    _sum?: AuthsSumAggregateInputType
    _min?: AuthsMinAggregateInputType
    _max?: AuthsMaxAggregateInputType
  }

  export type AuthsGroupByOutputType = {
    id: number
    username: string
    email: string
    active: boolean
    password: string
    _count: AuthsCountAggregateOutputType | null
    _avg: AuthsAvgAggregateOutputType | null
    _sum: AuthsSumAggregateOutputType | null
    _min: AuthsMinAggregateOutputType | null
    _max: AuthsMaxAggregateOutputType | null
  }

  type GetAuthsGroupByPayload<T extends AuthsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthsGroupByOutputType[P]>
            : GetScalarType<T[P], AuthsGroupByOutputType[P]>
        }
      >
    >


  export type AuthsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    active?: boolean
    password?: boolean
    auth_roles?: boolean | Auths$auth_rolesArgs<ExtArgs>
    tokens?: boolean | Auths$tokensArgs<ExtArgs>
    users?: boolean | Auths$usersArgs<ExtArgs>
    _count?: boolean | AuthsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auths"]>

  export type AuthsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    active?: boolean
    password?: boolean
  }, ExtArgs["result"]["auths"]>

  export type AuthsSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    active?: boolean
    password?: boolean
  }

  export type AuthsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auth_roles?: boolean | Auths$auth_rolesArgs<ExtArgs>
    tokens?: boolean | Auths$tokensArgs<ExtArgs>
    users?: boolean | Auths$usersArgs<ExtArgs>
    _count?: boolean | AuthsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AuthsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AuthsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Auths"
    objects: {
      auth_roles: Prisma.$Auth_rolesPayload<ExtArgs>[]
      tokens: Prisma.$TokensPayload<ExtArgs> | null
      users: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      active: boolean
      password: string
    }, ExtArgs["result"]["auths"]>
    composites: {}
  }

  type AuthsGetPayload<S extends boolean | null | undefined | AuthsDefaultArgs> = $Result.GetResult<Prisma.$AuthsPayload, S>

  type AuthsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuthsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuthsCountAggregateInputType | true
    }

  export interface AuthsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Auths'], meta: { name: 'Auths' } }
    /**
     * Find zero or one Auths that matches the filter.
     * @param {AuthsFindUniqueArgs} args - Arguments to find a Auths
     * @example
     * // Get one Auths
     * const auths = await prisma.auths.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthsFindUniqueArgs>(args: SelectSubset<T, AuthsFindUniqueArgs<ExtArgs>>): Prisma__AuthsClient<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Auths that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuthsFindUniqueOrThrowArgs} args - Arguments to find a Auths
     * @example
     * // Get one Auths
     * const auths = await prisma.auths.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthsFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthsClient<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Auths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthsFindFirstArgs} args - Arguments to find a Auths
     * @example
     * // Get one Auths
     * const auths = await prisma.auths.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthsFindFirstArgs>(args?: SelectSubset<T, AuthsFindFirstArgs<ExtArgs>>): Prisma__AuthsClient<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Auths that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthsFindFirstOrThrowArgs} args - Arguments to find a Auths
     * @example
     * // Get one Auths
     * const auths = await prisma.auths.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthsFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthsFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthsClient<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Auths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auths
     * const auths = await prisma.auths.findMany()
     * 
     * // Get first 10 Auths
     * const auths = await prisma.auths.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authsWithIdOnly = await prisma.auths.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthsFindManyArgs>(args?: SelectSubset<T, AuthsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Auths.
     * @param {AuthsCreateArgs} args - Arguments to create a Auths.
     * @example
     * // Create one Auths
     * const Auths = await prisma.auths.create({
     *   data: {
     *     // ... data to create a Auths
     *   }
     * })
     * 
     */
    create<T extends AuthsCreateArgs>(args: SelectSubset<T, AuthsCreateArgs<ExtArgs>>): Prisma__AuthsClient<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Auths.
     * @param {AuthsCreateManyArgs} args - Arguments to create many Auths.
     * @example
     * // Create many Auths
     * const auths = await prisma.auths.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthsCreateManyArgs>(args?: SelectSubset<T, AuthsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Auths and returns the data saved in the database.
     * @param {AuthsCreateManyAndReturnArgs} args - Arguments to create many Auths.
     * @example
     * // Create many Auths
     * const auths = await prisma.auths.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Auths and only return the `id`
     * const authsWithIdOnly = await prisma.auths.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuthsCreateManyAndReturnArgs>(args?: SelectSubset<T, AuthsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Auths.
     * @param {AuthsDeleteArgs} args - Arguments to delete one Auths.
     * @example
     * // Delete one Auths
     * const Auths = await prisma.auths.delete({
     *   where: {
     *     // ... filter to delete one Auths
     *   }
     * })
     * 
     */
    delete<T extends AuthsDeleteArgs>(args: SelectSubset<T, AuthsDeleteArgs<ExtArgs>>): Prisma__AuthsClient<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Auths.
     * @param {AuthsUpdateArgs} args - Arguments to update one Auths.
     * @example
     * // Update one Auths
     * const auths = await prisma.auths.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthsUpdateArgs>(args: SelectSubset<T, AuthsUpdateArgs<ExtArgs>>): Prisma__AuthsClient<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Auths.
     * @param {AuthsDeleteManyArgs} args - Arguments to filter Auths to delete.
     * @example
     * // Delete a few Auths
     * const { count } = await prisma.auths.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthsDeleteManyArgs>(args?: SelectSubset<T, AuthsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auths
     * const auths = await prisma.auths.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthsUpdateManyArgs>(args: SelectSubset<T, AuthsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Auths.
     * @param {AuthsUpsertArgs} args - Arguments to update or create a Auths.
     * @example
     * // Update or create a Auths
     * const auths = await prisma.auths.upsert({
     *   create: {
     *     // ... data to create a Auths
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auths we want to update
     *   }
     * })
     */
    upsert<T extends AuthsUpsertArgs>(args: SelectSubset<T, AuthsUpsertArgs<ExtArgs>>): Prisma__AuthsClient<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthsCountArgs} args - Arguments to filter Auths to count.
     * @example
     * // Count the number of Auths
     * const count = await prisma.auths.count({
     *   where: {
     *     // ... the filter for the Auths we want to count
     *   }
     * })
    **/
    count<T extends AuthsCountArgs>(
      args?: Subset<T, AuthsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthsAggregateArgs>(args: Subset<T, AuthsAggregateArgs>): Prisma.PrismaPromise<GetAuthsAggregateType<T>>

    /**
     * Group by Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthsGroupByArgs['orderBy'] }
        : { orderBy?: AuthsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Auths model
   */
  readonly fields: AuthsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Auths.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auth_roles<T extends Auths$auth_rolesArgs<ExtArgs> = {}>(args?: Subset<T, Auths$auth_rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "findMany"> | Null>
    tokens<T extends Auths$tokensArgs<ExtArgs> = {}>(args?: Subset<T, Auths$tokensArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    users<T extends Auths$usersArgs<ExtArgs> = {}>(args?: Subset<T, Auths$usersArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Auths model
   */ 
  interface AuthsFieldRefs {
    readonly id: FieldRef<"Auths", 'Int'>
    readonly username: FieldRef<"Auths", 'String'>
    readonly email: FieldRef<"Auths", 'String'>
    readonly active: FieldRef<"Auths", 'Boolean'>
    readonly password: FieldRef<"Auths", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Auths findUnique
   */
  export type AuthsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auths
     */
    select?: AuthsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthsInclude<ExtArgs> | null
    /**
     * Filter, which Auths to fetch.
     */
    where: AuthsWhereUniqueInput
  }

  /**
   * Auths findUniqueOrThrow
   */
  export type AuthsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auths
     */
    select?: AuthsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthsInclude<ExtArgs> | null
    /**
     * Filter, which Auths to fetch.
     */
    where: AuthsWhereUniqueInput
  }

  /**
   * Auths findFirst
   */
  export type AuthsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auths
     */
    select?: AuthsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthsInclude<ExtArgs> | null
    /**
     * Filter, which Auths to fetch.
     */
    where?: AuthsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthsOrderByWithRelationInput | AuthsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auths.
     */
    cursor?: AuthsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auths.
     */
    distinct?: AuthsScalarFieldEnum | AuthsScalarFieldEnum[]
  }

  /**
   * Auths findFirstOrThrow
   */
  export type AuthsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auths
     */
    select?: AuthsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthsInclude<ExtArgs> | null
    /**
     * Filter, which Auths to fetch.
     */
    where?: AuthsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthsOrderByWithRelationInput | AuthsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auths.
     */
    cursor?: AuthsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auths.
     */
    distinct?: AuthsScalarFieldEnum | AuthsScalarFieldEnum[]
  }

  /**
   * Auths findMany
   */
  export type AuthsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auths
     */
    select?: AuthsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthsInclude<ExtArgs> | null
    /**
     * Filter, which Auths to fetch.
     */
    where?: AuthsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthsOrderByWithRelationInput | AuthsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Auths.
     */
    cursor?: AuthsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    distinct?: AuthsScalarFieldEnum | AuthsScalarFieldEnum[]
  }

  /**
   * Auths create
   */
  export type AuthsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auths
     */
    select?: AuthsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthsInclude<ExtArgs> | null
    /**
     * The data needed to create a Auths.
     */
    data: XOR<AuthsCreateInput, AuthsUncheckedCreateInput>
  }

  /**
   * Auths createMany
   */
  export type AuthsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Auths.
     */
    data: AuthsCreateManyInput | AuthsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Auths createManyAndReturn
   */
  export type AuthsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auths
     */
    select?: AuthsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Auths.
     */
    data: AuthsCreateManyInput | AuthsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Auths update
   */
  export type AuthsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auths
     */
    select?: AuthsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthsInclude<ExtArgs> | null
    /**
     * The data needed to update a Auths.
     */
    data: XOR<AuthsUpdateInput, AuthsUncheckedUpdateInput>
    /**
     * Choose, which Auths to update.
     */
    where: AuthsWhereUniqueInput
  }

  /**
   * Auths updateMany
   */
  export type AuthsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Auths.
     */
    data: XOR<AuthsUpdateManyMutationInput, AuthsUncheckedUpdateManyInput>
    /**
     * Filter which Auths to update
     */
    where?: AuthsWhereInput
  }

  /**
   * Auths upsert
   */
  export type AuthsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auths
     */
    select?: AuthsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthsInclude<ExtArgs> | null
    /**
     * The filter to search for the Auths to update in case it exists.
     */
    where: AuthsWhereUniqueInput
    /**
     * In case the Auths found by the `where` argument doesn't exist, create a new Auths with this data.
     */
    create: XOR<AuthsCreateInput, AuthsUncheckedCreateInput>
    /**
     * In case the Auths was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthsUpdateInput, AuthsUncheckedUpdateInput>
  }

  /**
   * Auths delete
   */
  export type AuthsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auths
     */
    select?: AuthsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthsInclude<ExtArgs> | null
    /**
     * Filter which Auths to delete.
     */
    where: AuthsWhereUniqueInput
  }

  /**
   * Auths deleteMany
   */
  export type AuthsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auths to delete
     */
    where?: AuthsWhereInput
  }

  /**
   * Auths.auth_roles
   */
  export type Auths$auth_rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
    where?: Auth_rolesWhereInput
    orderBy?: Auth_rolesOrderByWithRelationInput | Auth_rolesOrderByWithRelationInput[]
    cursor?: Auth_rolesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Auth_rolesScalarFieldEnum | Auth_rolesScalarFieldEnum[]
  }

  /**
   * Auths.tokens
   */
  export type Auths$tokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensInclude<ExtArgs> | null
    where?: TokensWhereInput
  }

  /**
   * Auths.users
   */
  export type Auths$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * Auths without action
   */
  export type AuthsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auths
     */
    select?: AuthsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthsInclude<ExtArgs> | null
  }


  /**
   * Model Events
   */

  export type AggregateEvents = {
    _count: EventsCountAggregateOutputType | null
    _avg: EventsAvgAggregateOutputType | null
    _sum: EventsSumAggregateOutputType | null
    _min: EventsMinAggregateOutputType | null
    _max: EventsMaxAggregateOutputType | null
  }

  export type EventsAvgAggregateOutputType = {
    id: number | null
  }

  export type EventsSumAggregateOutputType = {
    id: bigint | null
  }

  export type EventsMinAggregateOutputType = {
    id: bigint | null
    event_initial_date: Date | null
    event_end_date: Date | null
    location: string | null
    city: string | null
    country: string | null
  }

  export type EventsMaxAggregateOutputType = {
    id: bigint | null
    event_initial_date: Date | null
    event_end_date: Date | null
    location: string | null
    city: string | null
    country: string | null
  }

  export type EventsCountAggregateOutputType = {
    id: number
    event_initial_date: number
    event_end_date: number
    location: number
    city: number
    country: number
    _all: number
  }


  export type EventsAvgAggregateInputType = {
    id?: true
  }

  export type EventsSumAggregateInputType = {
    id?: true
  }

  export type EventsMinAggregateInputType = {
    id?: true
    event_initial_date?: true
    event_end_date?: true
    location?: true
    city?: true
    country?: true
  }

  export type EventsMaxAggregateInputType = {
    id?: true
    event_initial_date?: true
    event_end_date?: true
    location?: true
    city?: true
    country?: true
  }

  export type EventsCountAggregateInputType = {
    id?: true
    event_initial_date?: true
    event_end_date?: true
    location?: true
    city?: true
    country?: true
    _all?: true
  }

  export type EventsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to aggregate.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventsMaxAggregateInputType
  }

  export type GetEventsAggregateType<T extends EventsAggregateArgs> = {
        [P in keyof T & keyof AggregateEvents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvents[P]>
      : GetScalarType<T[P], AggregateEvents[P]>
  }




  export type EventsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventsWhereInput
    orderBy?: EventsOrderByWithAggregationInput | EventsOrderByWithAggregationInput[]
    by: EventsScalarFieldEnum[] | EventsScalarFieldEnum
    having?: EventsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventsCountAggregateInputType | true
    _avg?: EventsAvgAggregateInputType
    _sum?: EventsSumAggregateInputType
    _min?: EventsMinAggregateInputType
    _max?: EventsMaxAggregateInputType
  }

  export type EventsGroupByOutputType = {
    id: bigint
    event_initial_date: Date | null
    event_end_date: Date | null
    location: string | null
    city: string | null
    country: string | null
    _count: EventsCountAggregateOutputType | null
    _avg: EventsAvgAggregateOutputType | null
    _sum: EventsSumAggregateOutputType | null
    _min: EventsMinAggregateOutputType | null
    _max: EventsMaxAggregateOutputType | null
  }

  type GetEventsGroupByPayload<T extends EventsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventsGroupByOutputType[P]>
            : GetScalarType<T[P], EventsGroupByOutputType[P]>
        }
      >
    >


  export type EventsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_initial_date?: boolean
    event_end_date?: boolean
    location?: boolean
    city?: boolean
    country?: boolean
    tickets?: boolean | Events$ticketsArgs<ExtArgs>
    _count?: boolean | EventsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["events"]>

  export type EventsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_initial_date?: boolean
    event_end_date?: boolean
    location?: boolean
    city?: boolean
    country?: boolean
  }, ExtArgs["result"]["events"]>

  export type EventsSelectScalar = {
    id?: boolean
    event_initial_date?: boolean
    event_end_date?: boolean
    location?: boolean
    city?: boolean
    country?: boolean
  }

  export type EventsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | Events$ticketsArgs<ExtArgs>
    _count?: boolean | EventsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EventsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Events"
    objects: {
      tickets: Prisma.$TicketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      event_initial_date: Date | null
      event_end_date: Date | null
      location: string | null
      city: string | null
      country: string | null
    }, ExtArgs["result"]["events"]>
    composites: {}
  }

  type EventsGetPayload<S extends boolean | null | undefined | EventsDefaultArgs> = $Result.GetResult<Prisma.$EventsPayload, S>

  type EventsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventsCountAggregateInputType | true
    }

  export interface EventsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Events'], meta: { name: 'Events' } }
    /**
     * Find zero or one Events that matches the filter.
     * @param {EventsFindUniqueArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventsFindUniqueArgs>(args: SelectSubset<T, EventsFindUniqueArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Events that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventsFindUniqueOrThrowArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventsFindUniqueOrThrowArgs>(args: SelectSubset<T, EventsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindFirstArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventsFindFirstArgs>(args?: SelectSubset<T, EventsFindFirstArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Events that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindFirstOrThrowArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventsFindFirstOrThrowArgs>(args?: SelectSubset<T, EventsFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.events.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.events.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventsWithIdOnly = await prisma.events.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventsFindManyArgs>(args?: SelectSubset<T, EventsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Events.
     * @param {EventsCreateArgs} args - Arguments to create a Events.
     * @example
     * // Create one Events
     * const Events = await prisma.events.create({
     *   data: {
     *     // ... data to create a Events
     *   }
     * })
     * 
     */
    create<T extends EventsCreateArgs>(args: SelectSubset<T, EventsCreateArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventsCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const events = await prisma.events.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventsCreateManyArgs>(args?: SelectSubset<T, EventsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventsCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const events = await prisma.events.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventsWithIdOnly = await prisma.events.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventsCreateManyAndReturnArgs>(args?: SelectSubset<T, EventsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Events.
     * @param {EventsDeleteArgs} args - Arguments to delete one Events.
     * @example
     * // Delete one Events
     * const Events = await prisma.events.delete({
     *   where: {
     *     // ... filter to delete one Events
     *   }
     * })
     * 
     */
    delete<T extends EventsDeleteArgs>(args: SelectSubset<T, EventsDeleteArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Events.
     * @param {EventsUpdateArgs} args - Arguments to update one Events.
     * @example
     * // Update one Events
     * const events = await prisma.events.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventsUpdateArgs>(args: SelectSubset<T, EventsUpdateArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventsDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.events.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventsDeleteManyArgs>(args?: SelectSubset<T, EventsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const events = await prisma.events.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventsUpdateManyArgs>(args: SelectSubset<T, EventsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Events.
     * @param {EventsUpsertArgs} args - Arguments to update or create a Events.
     * @example
     * // Update or create a Events
     * const events = await prisma.events.upsert({
     *   create: {
     *     // ... data to create a Events
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Events we want to update
     *   }
     * })
     */
    upsert<T extends EventsUpsertArgs>(args: SelectSubset<T, EventsUpsertArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.events.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventsCountArgs>(
      args?: Subset<T, EventsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventsAggregateArgs>(args: Subset<T, EventsAggregateArgs>): Prisma.PrismaPromise<GetEventsAggregateType<T>>

    /**
     * Group by Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventsGroupByArgs['orderBy'] }
        : { orderBy?: EventsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Events model
   */
  readonly fields: EventsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Events.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends Events$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Events$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Events model
   */ 
  interface EventsFieldRefs {
    readonly id: FieldRef<"Events", 'BigInt'>
    readonly event_initial_date: FieldRef<"Events", 'DateTime'>
    readonly event_end_date: FieldRef<"Events", 'DateTime'>
    readonly location: FieldRef<"Events", 'String'>
    readonly city: FieldRef<"Events", 'String'>
    readonly country: FieldRef<"Events", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Events findUnique
   */
  export type EventsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events findUniqueOrThrow
   */
  export type EventsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events findFirst
   */
  export type EventsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * Events findFirstOrThrow
   */
  export type EventsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * Events findMany
   */
  export type EventsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * Events create
   */
  export type EventsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * The data needed to create a Events.
     */
    data: XOR<EventsCreateInput, EventsUncheckedCreateInput>
  }

  /**
   * Events createMany
   */
  export type EventsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventsCreateManyInput | EventsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Events createManyAndReturn
   */
  export type EventsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventsCreateManyInput | EventsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Events update
   */
  export type EventsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * The data needed to update a Events.
     */
    data: XOR<EventsUpdateInput, EventsUncheckedUpdateInput>
    /**
     * Choose, which Events to update.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events updateMany
   */
  export type EventsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventsUpdateManyMutationInput, EventsUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventsWhereInput
  }

  /**
   * Events upsert
   */
  export type EventsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * The filter to search for the Events to update in case it exists.
     */
    where: EventsWhereUniqueInput
    /**
     * In case the Events found by the `where` argument doesn't exist, create a new Events with this data.
     */
    create: XOR<EventsCreateInput, EventsUncheckedCreateInput>
    /**
     * In case the Events was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventsUpdateInput, EventsUncheckedUpdateInput>
  }

  /**
   * Events delete
   */
  export type EventsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter which Events to delete.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events deleteMany
   */
  export type EventsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventsWhereInput
  }

  /**
   * Events.tickets
   */
  export type Events$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    where?: TicketsWhereInput
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    cursor?: TicketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Events without action
   */
  export type EventsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
  }


  /**
   * Model Roles
   */

  export type AggregateRoles = {
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  export type RolesAvgAggregateOutputType = {
    id: number | null
  }

  export type RolesSumAggregateOutputType = {
    id: number | null
  }

  export type RolesMinAggregateOutputType = {
    id: number | null
    roleName: $Enums.RoleNames | null
  }

  export type RolesMaxAggregateOutputType = {
    id: number | null
    roleName: $Enums.RoleNames | null
  }

  export type RolesCountAggregateOutputType = {
    id: number
    roleName: number
    _all: number
  }


  export type RolesAvgAggregateInputType = {
    id?: true
  }

  export type RolesSumAggregateInputType = {
    id?: true
  }

  export type RolesMinAggregateInputType = {
    id?: true
    roleName?: true
  }

  export type RolesMaxAggregateInputType = {
    id?: true
    roleName?: true
  }

  export type RolesCountAggregateInputType = {
    id?: true
    roleName?: true
    _all?: true
  }

  export type RolesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to aggregate.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesMaxAggregateInputType
  }

  export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles[P]>
      : GetScalarType<T[P], AggregateRoles[P]>
  }




  export type RolesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolesWhereInput
    orderBy?: RolesOrderByWithAggregationInput | RolesOrderByWithAggregationInput[]
    by: RolesScalarFieldEnum[] | RolesScalarFieldEnum
    having?: RolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesCountAggregateInputType | true
    _avg?: RolesAvgAggregateInputType
    _sum?: RolesSumAggregateInputType
    _min?: RolesMinAggregateInputType
    _max?: RolesMaxAggregateInputType
  }

  export type RolesGroupByOutputType = {
    id: number
    roleName: $Enums.RoleNames
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  type GetRolesGroupByPayload<T extends RolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesGroupByOutputType[P]>
            : GetScalarType<T[P], RolesGroupByOutputType[P]>
        }
      >
    >


  export type RolesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleName?: boolean
    auth_roles?: boolean | Roles$auth_rolesArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roles"]>

  export type RolesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleName?: boolean
  }, ExtArgs["result"]["roles"]>

  export type RolesSelectScalar = {
    id?: boolean
    roleName?: boolean
  }

  export type RolesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auth_roles?: boolean | Roles$auth_rolesArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RolesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Roles"
    objects: {
      auth_roles: Prisma.$Auth_rolesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roleName: $Enums.RoleNames
    }, ExtArgs["result"]["roles"]>
    composites: {}
  }

  type RolesGetPayload<S extends boolean | null | undefined | RolesDefaultArgs> = $Result.GetResult<Prisma.$RolesPayload, S>

  type RolesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RolesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RolesCountAggregateInputType | true
    }

  export interface RolesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Roles'], meta: { name: 'Roles' } }
    /**
     * Find zero or one Roles that matches the filter.
     * @param {RolesFindUniqueArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolesFindUniqueArgs>(args: SelectSubset<T, RolesFindUniqueArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Roles that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RolesFindUniqueOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolesFindUniqueOrThrowArgs>(args: SelectSubset<T, RolesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindFirstArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolesFindFirstArgs>(args?: SelectSubset<T, RolesFindFirstArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Roles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindFirstOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolesFindFirstOrThrowArgs>(args?: SelectSubset<T, RolesFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.roles.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RolesFindManyArgs>(args?: SelectSubset<T, RolesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Roles.
     * @param {RolesCreateArgs} args - Arguments to create a Roles.
     * @example
     * // Create one Roles
     * const Roles = await prisma.roles.create({
     *   data: {
     *     // ... data to create a Roles
     *   }
     * })
     * 
     */
    create<T extends RolesCreateArgs>(args: SelectSubset<T, RolesCreateArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {RolesCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const roles = await prisma.roles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolesCreateManyArgs>(args?: SelectSubset<T, RolesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RolesCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const roles = await prisma.roles.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const rolesWithIdOnly = await prisma.roles.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RolesCreateManyAndReturnArgs>(args?: SelectSubset<T, RolesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Roles.
     * @param {RolesDeleteArgs} args - Arguments to delete one Roles.
     * @example
     * // Delete one Roles
     * const Roles = await prisma.roles.delete({
     *   where: {
     *     // ... filter to delete one Roles
     *   }
     * })
     * 
     */
    delete<T extends RolesDeleteArgs>(args: SelectSubset<T, RolesDeleteArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Roles.
     * @param {RolesUpdateArgs} args - Arguments to update one Roles.
     * @example
     * // Update one Roles
     * const roles = await prisma.roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolesUpdateArgs>(args: SelectSubset<T, RolesUpdateArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RolesDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolesDeleteManyArgs>(args?: SelectSubset<T, RolesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolesUpdateManyArgs>(args: SelectSubset<T, RolesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Roles.
     * @param {RolesUpsertArgs} args - Arguments to update or create a Roles.
     * @example
     * // Update or create a Roles
     * const roles = await prisma.roles.upsert({
     *   create: {
     *     // ... data to create a Roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles we want to update
     *   }
     * })
     */
    upsert<T extends RolesUpsertArgs>(args: SelectSubset<T, RolesUpsertArgs<ExtArgs>>): Prisma__RolesClient<$Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.roles.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RolesCountArgs>(
      args?: Subset<T, RolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesAggregateArgs>(args: Subset<T, RolesAggregateArgs>): Prisma.PrismaPromise<GetRolesAggregateType<T>>

    /**
     * Group by Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolesGroupByArgs['orderBy'] }
        : { orderBy?: RolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Roles model
   */
  readonly fields: RolesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auth_roles<T extends Roles$auth_rolesArgs<ExtArgs> = {}>(args?: Subset<T, Roles$auth_rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Auth_rolesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Roles model
   */ 
  interface RolesFieldRefs {
    readonly id: FieldRef<"Roles", 'Int'>
    readonly roleName: FieldRef<"Roles", 'RoleNames'>
  }
    

  // Custom InputTypes
  /**
   * Roles findUnique
   */
  export type RolesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where: RolesWhereUniqueInput
  }

  /**
   * Roles findUniqueOrThrow
   */
  export type RolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where: RolesWhereUniqueInput
  }

  /**
   * Roles findFirst
   */
  export type RolesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * Roles findFirstOrThrow
   */
  export type RolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * Roles findMany
   */
  export type RolesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RolesOrderByWithRelationInput | RolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * Roles create
   */
  export type RolesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The data needed to create a Roles.
     */
    data: XOR<RolesCreateInput, RolesUncheckedCreateInput>
  }

  /**
   * Roles createMany
   */
  export type RolesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RolesCreateManyInput | RolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Roles createManyAndReturn
   */
  export type RolesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RolesCreateManyInput | RolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Roles update
   */
  export type RolesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The data needed to update a Roles.
     */
    data: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
    /**
     * Choose, which Roles to update.
     */
    where: RolesWhereUniqueInput
  }

  /**
   * Roles updateMany
   */
  export type RolesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RolesUpdateManyMutationInput, RolesUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RolesWhereInput
  }

  /**
   * Roles upsert
   */
  export type RolesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The filter to search for the Roles to update in case it exists.
     */
    where: RolesWhereUniqueInput
    /**
     * In case the Roles found by the `where` argument doesn't exist, create a new Roles with this data.
     */
    create: XOR<RolesCreateInput, RolesUncheckedCreateInput>
    /**
     * In case the Roles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
  }

  /**
   * Roles delete
   */
  export type RolesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter which Roles to delete.
     */
    where: RolesWhereUniqueInput
  }

  /**
   * Roles deleteMany
   */
  export type RolesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RolesWhereInput
  }

  /**
   * Roles.auth_roles
   */
  export type Roles$auth_rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth_roles
     */
    select?: Auth_rolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Auth_rolesInclude<ExtArgs> | null
    where?: Auth_rolesWhereInput
    orderBy?: Auth_rolesOrderByWithRelationInput | Auth_rolesOrderByWithRelationInput[]
    cursor?: Auth_rolesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Auth_rolesScalarFieldEnum | Auth_rolesScalarFieldEnum[]
  }

  /**
   * Roles without action
   */
  export type RolesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolesInclude<ExtArgs> | null
  }


  /**
   * Model Ticket_type
   */

  export type AggregateTicket_type = {
    _count: Ticket_typeCountAggregateOutputType | null
    _avg: Ticket_typeAvgAggregateOutputType | null
    _sum: Ticket_typeSumAggregateOutputType | null
    _min: Ticket_typeMinAggregateOutputType | null
    _max: Ticket_typeMaxAggregateOutputType | null
  }

  export type Ticket_typeAvgAggregateOutputType = {
    id: number | null
  }

  export type Ticket_typeSumAggregateOutputType = {
    id: number | null
  }

  export type Ticket_typeMinAggregateOutputType = {
    id: number | null
    description: string | null
    acronym: string | null
  }

  export type Ticket_typeMaxAggregateOutputType = {
    id: number | null
    description: string | null
    acronym: string | null
  }

  export type Ticket_typeCountAggregateOutputType = {
    id: number
    description: number
    acronym: number
    _all: number
  }


  export type Ticket_typeAvgAggregateInputType = {
    id?: true
  }

  export type Ticket_typeSumAggregateInputType = {
    id?: true
  }

  export type Ticket_typeMinAggregateInputType = {
    id?: true
    description?: true
    acronym?: true
  }

  export type Ticket_typeMaxAggregateInputType = {
    id?: true
    description?: true
    acronym?: true
  }

  export type Ticket_typeCountAggregateInputType = {
    id?: true
    description?: true
    acronym?: true
    _all?: true
  }

  export type Ticket_typeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticket_type to aggregate.
     */
    where?: Ticket_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ticket_types to fetch.
     */
    orderBy?: Ticket_typeOrderByWithRelationInput | Ticket_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Ticket_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ticket_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ticket_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ticket_types
    **/
    _count?: true | Ticket_typeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ticket_typeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ticket_typeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ticket_typeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ticket_typeMaxAggregateInputType
  }

  export type GetTicket_typeAggregateType<T extends Ticket_typeAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket_type]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket_type[P]>
      : GetScalarType<T[P], AggregateTicket_type[P]>
  }




  export type Ticket_typeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Ticket_typeWhereInput
    orderBy?: Ticket_typeOrderByWithAggregationInput | Ticket_typeOrderByWithAggregationInput[]
    by: Ticket_typeScalarFieldEnum[] | Ticket_typeScalarFieldEnum
    having?: Ticket_typeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ticket_typeCountAggregateInputType | true
    _avg?: Ticket_typeAvgAggregateInputType
    _sum?: Ticket_typeSumAggregateInputType
    _min?: Ticket_typeMinAggregateInputType
    _max?: Ticket_typeMaxAggregateInputType
  }

  export type Ticket_typeGroupByOutputType = {
    id: number
    description: string | null
    acronym: string | null
    _count: Ticket_typeCountAggregateOutputType | null
    _avg: Ticket_typeAvgAggregateOutputType | null
    _sum: Ticket_typeSumAggregateOutputType | null
    _min: Ticket_typeMinAggregateOutputType | null
    _max: Ticket_typeMaxAggregateOutputType | null
  }

  type GetTicket_typeGroupByPayload<T extends Ticket_typeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ticket_typeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ticket_typeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ticket_typeGroupByOutputType[P]>
            : GetScalarType<T[P], Ticket_typeGroupByOutputType[P]>
        }
      >
    >


  export type Ticket_typeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    acronym?: boolean
    tickets?: boolean | Ticket_type$ticketsArgs<ExtArgs>
    _count?: boolean | Ticket_typeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_type"]>

  export type Ticket_typeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    acronym?: boolean
  }, ExtArgs["result"]["ticket_type"]>

  export type Ticket_typeSelectScalar = {
    id?: boolean
    description?: boolean
    acronym?: boolean
  }

  export type Ticket_typeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | Ticket_type$ticketsArgs<ExtArgs>
    _count?: boolean | Ticket_typeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type Ticket_typeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $Ticket_typePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ticket_type"
    objects: {
      tickets: Prisma.$TicketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string | null
      acronym: string | null
    }, ExtArgs["result"]["ticket_type"]>
    composites: {}
  }

  type Ticket_typeGetPayload<S extends boolean | null | undefined | Ticket_typeDefaultArgs> = $Result.GetResult<Prisma.$Ticket_typePayload, S>

  type Ticket_typeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Ticket_typeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Ticket_typeCountAggregateInputType | true
    }

  export interface Ticket_typeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ticket_type'], meta: { name: 'Ticket_type' } }
    /**
     * Find zero or one Ticket_type that matches the filter.
     * @param {Ticket_typeFindUniqueArgs} args - Arguments to find a Ticket_type
     * @example
     * // Get one Ticket_type
     * const ticket_type = await prisma.ticket_type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Ticket_typeFindUniqueArgs>(args: SelectSubset<T, Ticket_typeFindUniqueArgs<ExtArgs>>): Prisma__Ticket_typeClient<$Result.GetResult<Prisma.$Ticket_typePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ticket_type that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {Ticket_typeFindUniqueOrThrowArgs} args - Arguments to find a Ticket_type
     * @example
     * // Get one Ticket_type
     * const ticket_type = await prisma.ticket_type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Ticket_typeFindUniqueOrThrowArgs>(args: SelectSubset<T, Ticket_typeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Ticket_typeClient<$Result.GetResult<Prisma.$Ticket_typePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ticket_type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_typeFindFirstArgs} args - Arguments to find a Ticket_type
     * @example
     * // Get one Ticket_type
     * const ticket_type = await prisma.ticket_type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Ticket_typeFindFirstArgs>(args?: SelectSubset<T, Ticket_typeFindFirstArgs<ExtArgs>>): Prisma__Ticket_typeClient<$Result.GetResult<Prisma.$Ticket_typePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ticket_type that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_typeFindFirstOrThrowArgs} args - Arguments to find a Ticket_type
     * @example
     * // Get one Ticket_type
     * const ticket_type = await prisma.ticket_type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Ticket_typeFindFirstOrThrowArgs>(args?: SelectSubset<T, Ticket_typeFindFirstOrThrowArgs<ExtArgs>>): Prisma__Ticket_typeClient<$Result.GetResult<Prisma.$Ticket_typePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ticket_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_typeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ticket_types
     * const ticket_types = await prisma.ticket_type.findMany()
     * 
     * // Get first 10 Ticket_types
     * const ticket_types = await prisma.ticket_type.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticket_typeWithIdOnly = await prisma.ticket_type.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Ticket_typeFindManyArgs>(args?: SelectSubset<T, Ticket_typeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Ticket_typePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ticket_type.
     * @param {Ticket_typeCreateArgs} args - Arguments to create a Ticket_type.
     * @example
     * // Create one Ticket_type
     * const Ticket_type = await prisma.ticket_type.create({
     *   data: {
     *     // ... data to create a Ticket_type
     *   }
     * })
     * 
     */
    create<T extends Ticket_typeCreateArgs>(args: SelectSubset<T, Ticket_typeCreateArgs<ExtArgs>>): Prisma__Ticket_typeClient<$Result.GetResult<Prisma.$Ticket_typePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ticket_types.
     * @param {Ticket_typeCreateManyArgs} args - Arguments to create many Ticket_types.
     * @example
     * // Create many Ticket_types
     * const ticket_type = await prisma.ticket_type.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Ticket_typeCreateManyArgs>(args?: SelectSubset<T, Ticket_typeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ticket_types and returns the data saved in the database.
     * @param {Ticket_typeCreateManyAndReturnArgs} args - Arguments to create many Ticket_types.
     * @example
     * // Create many Ticket_types
     * const ticket_type = await prisma.ticket_type.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ticket_types and only return the `id`
     * const ticket_typeWithIdOnly = await prisma.ticket_type.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Ticket_typeCreateManyAndReturnArgs>(args?: SelectSubset<T, Ticket_typeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Ticket_typePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ticket_type.
     * @param {Ticket_typeDeleteArgs} args - Arguments to delete one Ticket_type.
     * @example
     * // Delete one Ticket_type
     * const Ticket_type = await prisma.ticket_type.delete({
     *   where: {
     *     // ... filter to delete one Ticket_type
     *   }
     * })
     * 
     */
    delete<T extends Ticket_typeDeleteArgs>(args: SelectSubset<T, Ticket_typeDeleteArgs<ExtArgs>>): Prisma__Ticket_typeClient<$Result.GetResult<Prisma.$Ticket_typePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ticket_type.
     * @param {Ticket_typeUpdateArgs} args - Arguments to update one Ticket_type.
     * @example
     * // Update one Ticket_type
     * const ticket_type = await prisma.ticket_type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Ticket_typeUpdateArgs>(args: SelectSubset<T, Ticket_typeUpdateArgs<ExtArgs>>): Prisma__Ticket_typeClient<$Result.GetResult<Prisma.$Ticket_typePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ticket_types.
     * @param {Ticket_typeDeleteManyArgs} args - Arguments to filter Ticket_types to delete.
     * @example
     * // Delete a few Ticket_types
     * const { count } = await prisma.ticket_type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Ticket_typeDeleteManyArgs>(args?: SelectSubset<T, Ticket_typeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ticket_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_typeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ticket_types
     * const ticket_type = await prisma.ticket_type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Ticket_typeUpdateManyArgs>(args: SelectSubset<T, Ticket_typeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticket_type.
     * @param {Ticket_typeUpsertArgs} args - Arguments to update or create a Ticket_type.
     * @example
     * // Update or create a Ticket_type
     * const ticket_type = await prisma.ticket_type.upsert({
     *   create: {
     *     // ... data to create a Ticket_type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket_type we want to update
     *   }
     * })
     */
    upsert<T extends Ticket_typeUpsertArgs>(args: SelectSubset<T, Ticket_typeUpsertArgs<ExtArgs>>): Prisma__Ticket_typeClient<$Result.GetResult<Prisma.$Ticket_typePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ticket_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_typeCountArgs} args - Arguments to filter Ticket_types to count.
     * @example
     * // Count the number of Ticket_types
     * const count = await prisma.ticket_type.count({
     *   where: {
     *     // ... the filter for the Ticket_types we want to count
     *   }
     * })
    **/
    count<T extends Ticket_typeCountArgs>(
      args?: Subset<T, Ticket_typeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ticket_typeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ticket_typeAggregateArgs>(args: Subset<T, Ticket_typeAggregateArgs>): Prisma.PrismaPromise<GetTicket_typeAggregateType<T>>

    /**
     * Group by Ticket_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_typeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Ticket_typeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Ticket_typeGroupByArgs['orderBy'] }
        : { orderBy?: Ticket_typeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Ticket_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicket_typeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ticket_type model
   */
  readonly fields: Ticket_typeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ticket_type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Ticket_typeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends Ticket_type$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Ticket_type$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ticket_type model
   */ 
  interface Ticket_typeFieldRefs {
    readonly id: FieldRef<"Ticket_type", 'Int'>
    readonly description: FieldRef<"Ticket_type", 'String'>
    readonly acronym: FieldRef<"Ticket_type", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ticket_type findUnique
   */
  export type Ticket_typeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_typeInclude<ExtArgs> | null
    /**
     * Filter, which Ticket_type to fetch.
     */
    where: Ticket_typeWhereUniqueInput
  }

  /**
   * Ticket_type findUniqueOrThrow
   */
  export type Ticket_typeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_typeInclude<ExtArgs> | null
    /**
     * Filter, which Ticket_type to fetch.
     */
    where: Ticket_typeWhereUniqueInput
  }

  /**
   * Ticket_type findFirst
   */
  export type Ticket_typeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_typeInclude<ExtArgs> | null
    /**
     * Filter, which Ticket_type to fetch.
     */
    where?: Ticket_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ticket_types to fetch.
     */
    orderBy?: Ticket_typeOrderByWithRelationInput | Ticket_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ticket_types.
     */
    cursor?: Ticket_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ticket_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ticket_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ticket_types.
     */
    distinct?: Ticket_typeScalarFieldEnum | Ticket_typeScalarFieldEnum[]
  }

  /**
   * Ticket_type findFirstOrThrow
   */
  export type Ticket_typeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_typeInclude<ExtArgs> | null
    /**
     * Filter, which Ticket_type to fetch.
     */
    where?: Ticket_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ticket_types to fetch.
     */
    orderBy?: Ticket_typeOrderByWithRelationInput | Ticket_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ticket_types.
     */
    cursor?: Ticket_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ticket_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ticket_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ticket_types.
     */
    distinct?: Ticket_typeScalarFieldEnum | Ticket_typeScalarFieldEnum[]
  }

  /**
   * Ticket_type findMany
   */
  export type Ticket_typeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_typeInclude<ExtArgs> | null
    /**
     * Filter, which Ticket_types to fetch.
     */
    where?: Ticket_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ticket_types to fetch.
     */
    orderBy?: Ticket_typeOrderByWithRelationInput | Ticket_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ticket_types.
     */
    cursor?: Ticket_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ticket_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ticket_types.
     */
    skip?: number
    distinct?: Ticket_typeScalarFieldEnum | Ticket_typeScalarFieldEnum[]
  }

  /**
   * Ticket_type create
   */
  export type Ticket_typeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_typeInclude<ExtArgs> | null
    /**
     * The data needed to create a Ticket_type.
     */
    data: XOR<Ticket_typeCreateInput, Ticket_typeUncheckedCreateInput>
  }

  /**
   * Ticket_type createMany
   */
  export type Ticket_typeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ticket_types.
     */
    data: Ticket_typeCreateManyInput | Ticket_typeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ticket_type createManyAndReturn
   */
  export type Ticket_typeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ticket_types.
     */
    data: Ticket_typeCreateManyInput | Ticket_typeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ticket_type update
   */
  export type Ticket_typeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_typeInclude<ExtArgs> | null
    /**
     * The data needed to update a Ticket_type.
     */
    data: XOR<Ticket_typeUpdateInput, Ticket_typeUncheckedUpdateInput>
    /**
     * Choose, which Ticket_type to update.
     */
    where: Ticket_typeWhereUniqueInput
  }

  /**
   * Ticket_type updateMany
   */
  export type Ticket_typeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ticket_types.
     */
    data: XOR<Ticket_typeUpdateManyMutationInput, Ticket_typeUncheckedUpdateManyInput>
    /**
     * Filter which Ticket_types to update
     */
    where?: Ticket_typeWhereInput
  }

  /**
   * Ticket_type upsert
   */
  export type Ticket_typeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_typeInclude<ExtArgs> | null
    /**
     * The filter to search for the Ticket_type to update in case it exists.
     */
    where: Ticket_typeWhereUniqueInput
    /**
     * In case the Ticket_type found by the `where` argument doesn't exist, create a new Ticket_type with this data.
     */
    create: XOR<Ticket_typeCreateInput, Ticket_typeUncheckedCreateInput>
    /**
     * In case the Ticket_type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Ticket_typeUpdateInput, Ticket_typeUncheckedUpdateInput>
  }

  /**
   * Ticket_type delete
   */
  export type Ticket_typeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_typeInclude<ExtArgs> | null
    /**
     * Filter which Ticket_type to delete.
     */
    where: Ticket_typeWhereUniqueInput
  }

  /**
   * Ticket_type deleteMany
   */
  export type Ticket_typeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticket_types to delete
     */
    where?: Ticket_typeWhereInput
  }

  /**
   * Ticket_type.tickets
   */
  export type Ticket_type$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    where?: TicketsWhereInput
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    cursor?: TicketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Ticket_type without action
   */
  export type Ticket_typeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_typeInclude<ExtArgs> | null
  }


  /**
   * Model Ticket_user
   */

  export type AggregateTicket_user = {
    _count: Ticket_userCountAggregateOutputType | null
    _avg: Ticket_userAvgAggregateOutputType | null
    _sum: Ticket_userSumAggregateOutputType | null
    _min: Ticket_userMinAggregateOutputType | null
    _max: Ticket_userMaxAggregateOutputType | null
  }

  export type Ticket_userAvgAggregateOutputType = {
    ticket_id: number | null
    user_id: number | null
    quantity: number | null
  }

  export type Ticket_userSumAggregateOutputType = {
    ticket_id: number | null
    user_id: number | null
    quantity: number | null
  }

  export type Ticket_userMinAggregateOutputType = {
    ticket_id: number | null
    user_id: number | null
    purchase_date: Date | null
    quantity: number | null
  }

  export type Ticket_userMaxAggregateOutputType = {
    ticket_id: number | null
    user_id: number | null
    purchase_date: Date | null
    quantity: number | null
  }

  export type Ticket_userCountAggregateOutputType = {
    ticket_id: number
    user_id: number
    purchase_date: number
    quantity: number
    _all: number
  }


  export type Ticket_userAvgAggregateInputType = {
    ticket_id?: true
    user_id?: true
    quantity?: true
  }

  export type Ticket_userSumAggregateInputType = {
    ticket_id?: true
    user_id?: true
    quantity?: true
  }

  export type Ticket_userMinAggregateInputType = {
    ticket_id?: true
    user_id?: true
    purchase_date?: true
    quantity?: true
  }

  export type Ticket_userMaxAggregateInputType = {
    ticket_id?: true
    user_id?: true
    purchase_date?: true
    quantity?: true
  }

  export type Ticket_userCountAggregateInputType = {
    ticket_id?: true
    user_id?: true
    purchase_date?: true
    quantity?: true
    _all?: true
  }

  export type Ticket_userAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticket_user to aggregate.
     */
    where?: Ticket_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ticket_users to fetch.
     */
    orderBy?: Ticket_userOrderByWithRelationInput | Ticket_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Ticket_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ticket_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ticket_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ticket_users
    **/
    _count?: true | Ticket_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ticket_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ticket_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ticket_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ticket_userMaxAggregateInputType
  }

  export type GetTicket_userAggregateType<T extends Ticket_userAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket_user]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket_user[P]>
      : GetScalarType<T[P], AggregateTicket_user[P]>
  }




  export type Ticket_userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Ticket_userWhereInput
    orderBy?: Ticket_userOrderByWithAggregationInput | Ticket_userOrderByWithAggregationInput[]
    by: Ticket_userScalarFieldEnum[] | Ticket_userScalarFieldEnum
    having?: Ticket_userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ticket_userCountAggregateInputType | true
    _avg?: Ticket_userAvgAggregateInputType
    _sum?: Ticket_userSumAggregateInputType
    _min?: Ticket_userMinAggregateInputType
    _max?: Ticket_userMaxAggregateInputType
  }

  export type Ticket_userGroupByOutputType = {
    ticket_id: number
    user_id: number
    purchase_date: Date
    quantity: number | null
    _count: Ticket_userCountAggregateOutputType | null
    _avg: Ticket_userAvgAggregateOutputType | null
    _sum: Ticket_userSumAggregateOutputType | null
    _min: Ticket_userMinAggregateOutputType | null
    _max: Ticket_userMaxAggregateOutputType | null
  }

  type GetTicket_userGroupByPayload<T extends Ticket_userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ticket_userGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ticket_userGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ticket_userGroupByOutputType[P]>
            : GetScalarType<T[P], Ticket_userGroupByOutputType[P]>
        }
      >
    >


  export type Ticket_userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ticket_id?: boolean
    user_id?: boolean
    purchase_date?: boolean
    quantity?: boolean
    tickets?: boolean | TicketsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_user"]>

  export type Ticket_userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ticket_id?: boolean
    user_id?: boolean
    purchase_date?: boolean
    quantity?: boolean
    tickets?: boolean | TicketsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_user"]>

  export type Ticket_userSelectScalar = {
    ticket_id?: boolean
    user_id?: boolean
    purchase_date?: boolean
    quantity?: boolean
  }

  export type Ticket_userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | TicketsDefaultArgs<ExtArgs>
  }
  export type Ticket_userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | TicketsDefaultArgs<ExtArgs>
  }

  export type $Ticket_userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ticket_user"
    objects: {
      tickets: Prisma.$TicketsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ticket_id: number
      user_id: number
      purchase_date: Date
      quantity: number | null
    }, ExtArgs["result"]["ticket_user"]>
    composites: {}
  }

  type Ticket_userGetPayload<S extends boolean | null | undefined | Ticket_userDefaultArgs> = $Result.GetResult<Prisma.$Ticket_userPayload, S>

  type Ticket_userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Ticket_userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Ticket_userCountAggregateInputType | true
    }

  export interface Ticket_userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ticket_user'], meta: { name: 'Ticket_user' } }
    /**
     * Find zero or one Ticket_user that matches the filter.
     * @param {Ticket_userFindUniqueArgs} args - Arguments to find a Ticket_user
     * @example
     * // Get one Ticket_user
     * const ticket_user = await prisma.ticket_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Ticket_userFindUniqueArgs>(args: SelectSubset<T, Ticket_userFindUniqueArgs<ExtArgs>>): Prisma__Ticket_userClient<$Result.GetResult<Prisma.$Ticket_userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ticket_user that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {Ticket_userFindUniqueOrThrowArgs} args - Arguments to find a Ticket_user
     * @example
     * // Get one Ticket_user
     * const ticket_user = await prisma.ticket_user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Ticket_userFindUniqueOrThrowArgs>(args: SelectSubset<T, Ticket_userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Ticket_userClient<$Result.GetResult<Prisma.$Ticket_userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ticket_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_userFindFirstArgs} args - Arguments to find a Ticket_user
     * @example
     * // Get one Ticket_user
     * const ticket_user = await prisma.ticket_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Ticket_userFindFirstArgs>(args?: SelectSubset<T, Ticket_userFindFirstArgs<ExtArgs>>): Prisma__Ticket_userClient<$Result.GetResult<Prisma.$Ticket_userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ticket_user that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_userFindFirstOrThrowArgs} args - Arguments to find a Ticket_user
     * @example
     * // Get one Ticket_user
     * const ticket_user = await prisma.ticket_user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Ticket_userFindFirstOrThrowArgs>(args?: SelectSubset<T, Ticket_userFindFirstOrThrowArgs<ExtArgs>>): Prisma__Ticket_userClient<$Result.GetResult<Prisma.$Ticket_userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ticket_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ticket_users
     * const ticket_users = await prisma.ticket_user.findMany()
     * 
     * // Get first 10 Ticket_users
     * const ticket_users = await prisma.ticket_user.findMany({ take: 10 })
     * 
     * // Only select the `ticket_id`
     * const ticket_userWithTicket_idOnly = await prisma.ticket_user.findMany({ select: { ticket_id: true } })
     * 
     */
    findMany<T extends Ticket_userFindManyArgs>(args?: SelectSubset<T, Ticket_userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Ticket_userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ticket_user.
     * @param {Ticket_userCreateArgs} args - Arguments to create a Ticket_user.
     * @example
     * // Create one Ticket_user
     * const Ticket_user = await prisma.ticket_user.create({
     *   data: {
     *     // ... data to create a Ticket_user
     *   }
     * })
     * 
     */
    create<T extends Ticket_userCreateArgs>(args: SelectSubset<T, Ticket_userCreateArgs<ExtArgs>>): Prisma__Ticket_userClient<$Result.GetResult<Prisma.$Ticket_userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ticket_users.
     * @param {Ticket_userCreateManyArgs} args - Arguments to create many Ticket_users.
     * @example
     * // Create many Ticket_users
     * const ticket_user = await prisma.ticket_user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Ticket_userCreateManyArgs>(args?: SelectSubset<T, Ticket_userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ticket_users and returns the data saved in the database.
     * @param {Ticket_userCreateManyAndReturnArgs} args - Arguments to create many Ticket_users.
     * @example
     * // Create many Ticket_users
     * const ticket_user = await prisma.ticket_user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ticket_users and only return the `ticket_id`
     * const ticket_userWithTicket_idOnly = await prisma.ticket_user.createManyAndReturn({ 
     *   select: { ticket_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Ticket_userCreateManyAndReturnArgs>(args?: SelectSubset<T, Ticket_userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Ticket_userPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ticket_user.
     * @param {Ticket_userDeleteArgs} args - Arguments to delete one Ticket_user.
     * @example
     * // Delete one Ticket_user
     * const Ticket_user = await prisma.ticket_user.delete({
     *   where: {
     *     // ... filter to delete one Ticket_user
     *   }
     * })
     * 
     */
    delete<T extends Ticket_userDeleteArgs>(args: SelectSubset<T, Ticket_userDeleteArgs<ExtArgs>>): Prisma__Ticket_userClient<$Result.GetResult<Prisma.$Ticket_userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ticket_user.
     * @param {Ticket_userUpdateArgs} args - Arguments to update one Ticket_user.
     * @example
     * // Update one Ticket_user
     * const ticket_user = await prisma.ticket_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Ticket_userUpdateArgs>(args: SelectSubset<T, Ticket_userUpdateArgs<ExtArgs>>): Prisma__Ticket_userClient<$Result.GetResult<Prisma.$Ticket_userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ticket_users.
     * @param {Ticket_userDeleteManyArgs} args - Arguments to filter Ticket_users to delete.
     * @example
     * // Delete a few Ticket_users
     * const { count } = await prisma.ticket_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Ticket_userDeleteManyArgs>(args?: SelectSubset<T, Ticket_userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ticket_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ticket_users
     * const ticket_user = await prisma.ticket_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Ticket_userUpdateManyArgs>(args: SelectSubset<T, Ticket_userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticket_user.
     * @param {Ticket_userUpsertArgs} args - Arguments to update or create a Ticket_user.
     * @example
     * // Update or create a Ticket_user
     * const ticket_user = await prisma.ticket_user.upsert({
     *   create: {
     *     // ... data to create a Ticket_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket_user we want to update
     *   }
     * })
     */
    upsert<T extends Ticket_userUpsertArgs>(args: SelectSubset<T, Ticket_userUpsertArgs<ExtArgs>>): Prisma__Ticket_userClient<$Result.GetResult<Prisma.$Ticket_userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ticket_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_userCountArgs} args - Arguments to filter Ticket_users to count.
     * @example
     * // Count the number of Ticket_users
     * const count = await prisma.ticket_user.count({
     *   where: {
     *     // ... the filter for the Ticket_users we want to count
     *   }
     * })
    **/
    count<T extends Ticket_userCountArgs>(
      args?: Subset<T, Ticket_userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ticket_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ticket_userAggregateArgs>(args: Subset<T, Ticket_userAggregateArgs>): Prisma.PrismaPromise<GetTicket_userAggregateType<T>>

    /**
     * Group by Ticket_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Ticket_userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Ticket_userGroupByArgs['orderBy'] }
        : { orderBy?: Ticket_userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Ticket_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicket_userGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ticket_user model
   */
  readonly fields: Ticket_userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ticket_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Ticket_userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends TicketsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketsDefaultArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ticket_user model
   */ 
  interface Ticket_userFieldRefs {
    readonly ticket_id: FieldRef<"Ticket_user", 'Int'>
    readonly user_id: FieldRef<"Ticket_user", 'Int'>
    readonly purchase_date: FieldRef<"Ticket_user", 'DateTime'>
    readonly quantity: FieldRef<"Ticket_user", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Ticket_user findUnique
   */
  export type Ticket_userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userInclude<ExtArgs> | null
    /**
     * Filter, which Ticket_user to fetch.
     */
    where: Ticket_userWhereUniqueInput
  }

  /**
   * Ticket_user findUniqueOrThrow
   */
  export type Ticket_userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userInclude<ExtArgs> | null
    /**
     * Filter, which Ticket_user to fetch.
     */
    where: Ticket_userWhereUniqueInput
  }

  /**
   * Ticket_user findFirst
   */
  export type Ticket_userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userInclude<ExtArgs> | null
    /**
     * Filter, which Ticket_user to fetch.
     */
    where?: Ticket_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ticket_users to fetch.
     */
    orderBy?: Ticket_userOrderByWithRelationInput | Ticket_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ticket_users.
     */
    cursor?: Ticket_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ticket_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ticket_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ticket_users.
     */
    distinct?: Ticket_userScalarFieldEnum | Ticket_userScalarFieldEnum[]
  }

  /**
   * Ticket_user findFirstOrThrow
   */
  export type Ticket_userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userInclude<ExtArgs> | null
    /**
     * Filter, which Ticket_user to fetch.
     */
    where?: Ticket_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ticket_users to fetch.
     */
    orderBy?: Ticket_userOrderByWithRelationInput | Ticket_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ticket_users.
     */
    cursor?: Ticket_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ticket_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ticket_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ticket_users.
     */
    distinct?: Ticket_userScalarFieldEnum | Ticket_userScalarFieldEnum[]
  }

  /**
   * Ticket_user findMany
   */
  export type Ticket_userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userInclude<ExtArgs> | null
    /**
     * Filter, which Ticket_users to fetch.
     */
    where?: Ticket_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ticket_users to fetch.
     */
    orderBy?: Ticket_userOrderByWithRelationInput | Ticket_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ticket_users.
     */
    cursor?: Ticket_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ticket_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ticket_users.
     */
    skip?: number
    distinct?: Ticket_userScalarFieldEnum | Ticket_userScalarFieldEnum[]
  }

  /**
   * Ticket_user create
   */
  export type Ticket_userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userInclude<ExtArgs> | null
    /**
     * The data needed to create a Ticket_user.
     */
    data: XOR<Ticket_userCreateInput, Ticket_userUncheckedCreateInput>
  }

  /**
   * Ticket_user createMany
   */
  export type Ticket_userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ticket_users.
     */
    data: Ticket_userCreateManyInput | Ticket_userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ticket_user createManyAndReturn
   */
  export type Ticket_userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ticket_users.
     */
    data: Ticket_userCreateManyInput | Ticket_userCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ticket_user update
   */
  export type Ticket_userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userInclude<ExtArgs> | null
    /**
     * The data needed to update a Ticket_user.
     */
    data: XOR<Ticket_userUpdateInput, Ticket_userUncheckedUpdateInput>
    /**
     * Choose, which Ticket_user to update.
     */
    where: Ticket_userWhereUniqueInput
  }

  /**
   * Ticket_user updateMany
   */
  export type Ticket_userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ticket_users.
     */
    data: XOR<Ticket_userUpdateManyMutationInput, Ticket_userUncheckedUpdateManyInput>
    /**
     * Filter which Ticket_users to update
     */
    where?: Ticket_userWhereInput
  }

  /**
   * Ticket_user upsert
   */
  export type Ticket_userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userInclude<ExtArgs> | null
    /**
     * The filter to search for the Ticket_user to update in case it exists.
     */
    where: Ticket_userWhereUniqueInput
    /**
     * In case the Ticket_user found by the `where` argument doesn't exist, create a new Ticket_user with this data.
     */
    create: XOR<Ticket_userCreateInput, Ticket_userUncheckedCreateInput>
    /**
     * In case the Ticket_user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Ticket_userUpdateInput, Ticket_userUncheckedUpdateInput>
  }

  /**
   * Ticket_user delete
   */
  export type Ticket_userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userInclude<ExtArgs> | null
    /**
     * Filter which Ticket_user to delete.
     */
    where: Ticket_userWhereUniqueInput
  }

  /**
   * Ticket_user deleteMany
   */
  export type Ticket_userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticket_users to delete
     */
    where?: Ticket_userWhereInput
  }

  /**
   * Ticket_user without action
   */
  export type Ticket_userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userInclude<ExtArgs> | null
  }


  /**
   * Model Tickets
   */

  export type AggregateTickets = {
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  export type TicketsAvgAggregateOutputType = {
    id: number | null
    value: Decimal | null
    event_id: number | null
    ticket_type_id: number | null
  }

  export type TicketsSumAggregateOutputType = {
    id: number | null
    value: Decimal | null
    event_id: bigint | null
    ticket_type_id: number | null
  }

  export type TicketsMinAggregateOutputType = {
    id: number | null
    value: Decimal | null
    event_id: bigint | null
    ticket_type_id: number | null
  }

  export type TicketsMaxAggregateOutputType = {
    id: number | null
    value: Decimal | null
    event_id: bigint | null
    ticket_type_id: number | null
  }

  export type TicketsCountAggregateOutputType = {
    id: number
    value: number
    event_id: number
    ticket_type_id: number
    _all: number
  }


  export type TicketsAvgAggregateInputType = {
    id?: true
    value?: true
    event_id?: true
    ticket_type_id?: true
  }

  export type TicketsSumAggregateInputType = {
    id?: true
    value?: true
    event_id?: true
    ticket_type_id?: true
  }

  export type TicketsMinAggregateInputType = {
    id?: true
    value?: true
    event_id?: true
    ticket_type_id?: true
  }

  export type TicketsMaxAggregateInputType = {
    id?: true
    value?: true
    event_id?: true
    ticket_type_id?: true
  }

  export type TicketsCountAggregateInputType = {
    id?: true
    value?: true
    event_id?: true
    ticket_type_id?: true
    _all?: true
  }

  export type TicketsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to aggregate.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketsMaxAggregateInputType
  }

  export type GetTicketsAggregateType<T extends TicketsAggregateArgs> = {
        [P in keyof T & keyof AggregateTickets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTickets[P]>
      : GetScalarType<T[P], AggregateTickets[P]>
  }




  export type TicketsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsWhereInput
    orderBy?: TicketsOrderByWithAggregationInput | TicketsOrderByWithAggregationInput[]
    by: TicketsScalarFieldEnum[] | TicketsScalarFieldEnum
    having?: TicketsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketsCountAggregateInputType | true
    _avg?: TicketsAvgAggregateInputType
    _sum?: TicketsSumAggregateInputType
    _min?: TicketsMinAggregateInputType
    _max?: TicketsMaxAggregateInputType
  }

  export type TicketsGroupByOutputType = {
    id: number
    value: Decimal | null
    event_id: bigint | null
    ticket_type_id: number | null
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  type GetTicketsGroupByPayload<T extends TicketsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketsGroupByOutputType[P]>
            : GetScalarType<T[P], TicketsGroupByOutputType[P]>
        }
      >
    >


  export type TicketsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    event_id?: boolean
    ticket_type_id?: boolean
    ticket_user?: boolean | Tickets$ticket_userArgs<ExtArgs>
    events?: boolean | Tickets$eventsArgs<ExtArgs>
    ticket_type?: boolean | Tickets$ticket_typeArgs<ExtArgs>
    _count?: boolean | TicketsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>

  export type TicketsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    event_id?: boolean
    ticket_type_id?: boolean
    events?: boolean | Tickets$eventsArgs<ExtArgs>
    ticket_type?: boolean | Tickets$ticket_typeArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>

  export type TicketsSelectScalar = {
    id?: boolean
    value?: boolean
    event_id?: boolean
    ticket_type_id?: boolean
  }

  export type TicketsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket_user?: boolean | Tickets$ticket_userArgs<ExtArgs>
    events?: boolean | Tickets$eventsArgs<ExtArgs>
    ticket_type?: boolean | Tickets$ticket_typeArgs<ExtArgs>
    _count?: boolean | TicketsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TicketsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Tickets$eventsArgs<ExtArgs>
    ticket_type?: boolean | Tickets$ticket_typeArgs<ExtArgs>
  }

  export type $TicketsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tickets"
    objects: {
      ticket_user: Prisma.$Ticket_userPayload<ExtArgs>[]
      events: Prisma.$EventsPayload<ExtArgs> | null
      ticket_type: Prisma.$Ticket_typePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      value: Prisma.Decimal | null
      event_id: bigint | null
      ticket_type_id: number | null
    }, ExtArgs["result"]["tickets"]>
    composites: {}
  }

  type TicketsGetPayload<S extends boolean | null | undefined | TicketsDefaultArgs> = $Result.GetResult<Prisma.$TicketsPayload, S>

  type TicketsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketsCountAggregateInputType | true
    }

  export interface TicketsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tickets'], meta: { name: 'Tickets' } }
    /**
     * Find zero or one Tickets that matches the filter.
     * @param {TicketsFindUniqueArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketsFindUniqueArgs>(args: SelectSubset<T, TicketsFindUniqueArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tickets that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketsFindUniqueOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketsFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindFirstArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketsFindFirstArgs>(args?: SelectSubset<T, TicketsFindFirstArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tickets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindFirstOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketsFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.tickets.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.tickets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketsWithIdOnly = await prisma.tickets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TicketsFindManyArgs>(args?: SelectSubset<T, TicketsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tickets.
     * @param {TicketsCreateArgs} args - Arguments to create a Tickets.
     * @example
     * // Create one Tickets
     * const Tickets = await prisma.tickets.create({
     *   data: {
     *     // ... data to create a Tickets
     *   }
     * })
     * 
     */
    create<T extends TicketsCreateArgs>(args: SelectSubset<T, TicketsCreateArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tickets.
     * @param {TicketsCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const tickets = await prisma.tickets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketsCreateManyArgs>(args?: SelectSubset<T, TicketsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tickets and returns the data saved in the database.
     * @param {TicketsCreateManyAndReturnArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const tickets = await prisma.tickets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tickets and only return the `id`
     * const ticketsWithIdOnly = await prisma.tickets.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketsCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tickets.
     * @param {TicketsDeleteArgs} args - Arguments to delete one Tickets.
     * @example
     * // Delete one Tickets
     * const Tickets = await prisma.tickets.delete({
     *   where: {
     *     // ... filter to delete one Tickets
     *   }
     * })
     * 
     */
    delete<T extends TicketsDeleteArgs>(args: SelectSubset<T, TicketsDeleteArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tickets.
     * @param {TicketsUpdateArgs} args - Arguments to update one Tickets.
     * @example
     * // Update one Tickets
     * const tickets = await prisma.tickets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketsUpdateArgs>(args: SelectSubset<T, TicketsUpdateArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tickets.
     * @param {TicketsDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.tickets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketsDeleteManyArgs>(args?: SelectSubset<T, TicketsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const tickets = await prisma.tickets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketsUpdateManyArgs>(args: SelectSubset<T, TicketsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tickets.
     * @param {TicketsUpsertArgs} args - Arguments to update or create a Tickets.
     * @example
     * // Update or create a Tickets
     * const tickets = await prisma.tickets.upsert({
     *   create: {
     *     // ... data to create a Tickets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tickets we want to update
     *   }
     * })
     */
    upsert<T extends TicketsUpsertArgs>(args: SelectSubset<T, TicketsUpsertArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.tickets.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketsCountArgs>(
      args?: Subset<T, TicketsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketsAggregateArgs>(args: Subset<T, TicketsAggregateArgs>): Prisma.PrismaPromise<GetTicketsAggregateType<T>>

    /**
     * Group by Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketsGroupByArgs['orderBy'] }
        : { orderBy?: TicketsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tickets model
   */
  readonly fields: TicketsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tickets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket_user<T extends Tickets$ticket_userArgs<ExtArgs> = {}>(args?: Subset<T, Tickets$ticket_userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Ticket_userPayload<ExtArgs>, T, "findMany"> | Null>
    events<T extends Tickets$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Tickets$eventsArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    ticket_type<T extends Tickets$ticket_typeArgs<ExtArgs> = {}>(args?: Subset<T, Tickets$ticket_typeArgs<ExtArgs>>): Prisma__Ticket_typeClient<$Result.GetResult<Prisma.$Ticket_typePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tickets model
   */ 
  interface TicketsFieldRefs {
    readonly id: FieldRef<"Tickets", 'Int'>
    readonly value: FieldRef<"Tickets", 'Decimal'>
    readonly event_id: FieldRef<"Tickets", 'BigInt'>
    readonly ticket_type_id: FieldRef<"Tickets", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Tickets findUnique
   */
  export type TicketsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets findUniqueOrThrow
   */
  export type TicketsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets findFirst
   */
  export type TicketsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Tickets findFirstOrThrow
   */
  export type TicketsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Tickets findMany
   */
  export type TicketsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Tickets create
   */
  export type TicketsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * The data needed to create a Tickets.
     */
    data: XOR<TicketsCreateInput, TicketsUncheckedCreateInput>
  }

  /**
   * Tickets createMany
   */
  export type TicketsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tickets.
     */
    data: TicketsCreateManyInput | TicketsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tickets createManyAndReturn
   */
  export type TicketsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tickets.
     */
    data: TicketsCreateManyInput | TicketsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tickets update
   */
  export type TicketsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * The data needed to update a Tickets.
     */
    data: XOR<TicketsUpdateInput, TicketsUncheckedUpdateInput>
    /**
     * Choose, which Tickets to update.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets updateMany
   */
  export type TicketsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketsWhereInput
  }

  /**
   * Tickets upsert
   */
  export type TicketsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * The filter to search for the Tickets to update in case it exists.
     */
    where: TicketsWhereUniqueInput
    /**
     * In case the Tickets found by the `where` argument doesn't exist, create a new Tickets with this data.
     */
    create: XOR<TicketsCreateInput, TicketsUncheckedCreateInput>
    /**
     * In case the Tickets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketsUpdateInput, TicketsUncheckedUpdateInput>
  }

  /**
   * Tickets delete
   */
  export type TicketsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter which Tickets to delete.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets deleteMany
   */
  export type TicketsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to delete
     */
    where?: TicketsWhereInput
  }

  /**
   * Tickets.ticket_user
   */
  export type Tickets$ticket_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_user
     */
    select?: Ticket_userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_userInclude<ExtArgs> | null
    where?: Ticket_userWhereInput
    orderBy?: Ticket_userOrderByWithRelationInput | Ticket_userOrderByWithRelationInput[]
    cursor?: Ticket_userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_userScalarFieldEnum | Ticket_userScalarFieldEnum[]
  }

  /**
   * Tickets.events
   */
  export type Tickets$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    where?: EventsWhereInput
  }

  /**
   * Tickets.ticket_type
   */
  export type Tickets$ticket_typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_type
     */
    select?: Ticket_typeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Ticket_typeInclude<ExtArgs> | null
    where?: Ticket_typeWhereInput
  }

  /**
   * Tickets without action
   */
  export type TicketsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
  }


  /**
   * Model Tokens
   */

  export type AggregateTokens = {
    _count: TokensCountAggregateOutputType | null
    _avg: TokensAvgAggregateOutputType | null
    _sum: TokensSumAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  export type TokensAvgAggregateOutputType = {
    id: number | null
    auth_id: number | null
  }

  export type TokensSumAggregateOutputType = {
    id: number | null
    auth_id: number | null
  }

  export type TokensMinAggregateOutputType = {
    id: number | null
    key: string | null
    auth_id: number | null
  }

  export type TokensMaxAggregateOutputType = {
    id: number | null
    key: string | null
    auth_id: number | null
  }

  export type TokensCountAggregateOutputType = {
    id: number
    key: number
    auth_id: number
    _all: number
  }


  export type TokensAvgAggregateInputType = {
    id?: true
    auth_id?: true
  }

  export type TokensSumAggregateInputType = {
    id?: true
    auth_id?: true
  }

  export type TokensMinAggregateInputType = {
    id?: true
    key?: true
    auth_id?: true
  }

  export type TokensMaxAggregateInputType = {
    id?: true
    key?: true
    auth_id?: true
  }

  export type TokensCountAggregateInputType = {
    id?: true
    key?: true
    auth_id?: true
    _all?: true
  }

  export type TokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to aggregate.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokensMaxAggregateInputType
  }

  export type GetTokensAggregateType<T extends TokensAggregateArgs> = {
        [P in keyof T & keyof AggregateTokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTokens[P]>
      : GetScalarType<T[P], AggregateTokens[P]>
  }




  export type TokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokensWhereInput
    orderBy?: TokensOrderByWithAggregationInput | TokensOrderByWithAggregationInput[]
    by: TokensScalarFieldEnum[] | TokensScalarFieldEnum
    having?: TokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokensCountAggregateInputType | true
    _avg?: TokensAvgAggregateInputType
    _sum?: TokensSumAggregateInputType
    _min?: TokensMinAggregateInputType
    _max?: TokensMaxAggregateInputType
  }

  export type TokensGroupByOutputType = {
    id: number
    key: string
    auth_id: number
    _count: TokensCountAggregateOutputType | null
    _avg: TokensAvgAggregateOutputType | null
    _sum: TokensSumAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  type GetTokensGroupByPayload<T extends TokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokensGroupByOutputType[P]>
            : GetScalarType<T[P], TokensGroupByOutputType[P]>
        }
      >
    >


  export type TokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    auth_id?: boolean
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tokens"]>

  export type TokensSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    auth_id?: boolean
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tokens"]>

  export type TokensSelectScalar = {
    id?: boolean
    key?: boolean
    auth_id?: boolean
  }

  export type TokensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
  }
  export type TokensIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
  }

  export type $TokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tokens"
    objects: {
      auths: Prisma.$AuthsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      key: string
      auth_id: number
    }, ExtArgs["result"]["tokens"]>
    composites: {}
  }

  type TokensGetPayload<S extends boolean | null | undefined | TokensDefaultArgs> = $Result.GetResult<Prisma.$TokensPayload, S>

  type TokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TokensFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TokensCountAggregateInputType | true
    }

  export interface TokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tokens'], meta: { name: 'Tokens' } }
    /**
     * Find zero or one Tokens that matches the filter.
     * @param {TokensFindUniqueArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokensFindUniqueArgs>(args: SelectSubset<T, TokensFindUniqueArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tokens that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TokensFindUniqueOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokensFindUniqueOrThrowArgs>(args: SelectSubset<T, TokensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindFirstArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokensFindFirstArgs>(args?: SelectSubset<T, TokensFindFirstArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindFirstOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokensFindFirstOrThrowArgs>(args?: SelectSubset<T, TokensFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.tokens.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokensWithIdOnly = await prisma.tokens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokensFindManyArgs>(args?: SelectSubset<T, TokensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tokens.
     * @param {TokensCreateArgs} args - Arguments to create a Tokens.
     * @example
     * // Create one Tokens
     * const Tokens = await prisma.tokens.create({
     *   data: {
     *     // ... data to create a Tokens
     *   }
     * })
     * 
     */
    create<T extends TokensCreateArgs>(args: SelectSubset<T, TokensCreateArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tokens.
     * @param {TokensCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const tokens = await prisma.tokens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokensCreateManyArgs>(args?: SelectSubset<T, TokensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tokens and returns the data saved in the database.
     * @param {TokensCreateManyAndReturnArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const tokens = await prisma.tokens.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tokens and only return the `id`
     * const tokensWithIdOnly = await prisma.tokens.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokensCreateManyAndReturnArgs>(args?: SelectSubset<T, TokensCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tokens.
     * @param {TokensDeleteArgs} args - Arguments to delete one Tokens.
     * @example
     * // Delete one Tokens
     * const Tokens = await prisma.tokens.delete({
     *   where: {
     *     // ... filter to delete one Tokens
     *   }
     * })
     * 
     */
    delete<T extends TokensDeleteArgs>(args: SelectSubset<T, TokensDeleteArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tokens.
     * @param {TokensUpdateArgs} args - Arguments to update one Tokens.
     * @example
     * // Update one Tokens
     * const tokens = await prisma.tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokensUpdateArgs>(args: SelectSubset<T, TokensUpdateArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tokens.
     * @param {TokensDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokensDeleteManyArgs>(args?: SelectSubset<T, TokensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const tokens = await prisma.tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokensUpdateManyArgs>(args: SelectSubset<T, TokensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tokens.
     * @param {TokensUpsertArgs} args - Arguments to update or create a Tokens.
     * @example
     * // Update or create a Tokens
     * const tokens = await prisma.tokens.upsert({
     *   create: {
     *     // ... data to create a Tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tokens we want to update
     *   }
     * })
     */
    upsert<T extends TokensUpsertArgs>(args: SelectSubset<T, TokensUpsertArgs<ExtArgs>>): Prisma__TokensClient<$Result.GetResult<Prisma.$TokensPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.tokens.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokensCountArgs>(
      args?: Subset<T, TokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokensAggregateArgs>(args: Subset<T, TokensAggregateArgs>): Prisma.PrismaPromise<GetTokensAggregateType<T>>

    /**
     * Group by Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokensGroupByArgs['orderBy'] }
        : { orderBy?: TokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tokens model
   */
  readonly fields: TokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auths<T extends AuthsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuthsDefaultArgs<ExtArgs>>): Prisma__AuthsClient<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tokens model
   */ 
  interface TokensFieldRefs {
    readonly id: FieldRef<"Tokens", 'Int'>
    readonly key: FieldRef<"Tokens", 'String'>
    readonly auth_id: FieldRef<"Tokens", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Tokens findUnique
   */
  export type TokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where: TokensWhereUniqueInput
  }

  /**
   * Tokens findUniqueOrThrow
   */
  export type TokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where: TokensWhereUniqueInput
  }

  /**
   * Tokens findFirst
   */
  export type TokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * Tokens findFirstOrThrow
   */
  export type TokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * Tokens findMany
   */
  export type TokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokensOrderByWithRelationInput | TokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * Tokens create
   */
  export type TokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * The data needed to create a Tokens.
     */
    data: XOR<TokensCreateInput, TokensUncheckedCreateInput>
  }

  /**
   * Tokens createMany
   */
  export type TokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokensCreateManyInput | TokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tokens createManyAndReturn
   */
  export type TokensCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tokens.
     */
    data: TokensCreateManyInput | TokensCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tokens update
   */
  export type TokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * The data needed to update a Tokens.
     */
    data: XOR<TokensUpdateInput, TokensUncheckedUpdateInput>
    /**
     * Choose, which Tokens to update.
     */
    where: TokensWhereUniqueInput
  }

  /**
   * Tokens updateMany
   */
  export type TokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokensUpdateManyMutationInput, TokensUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokensWhereInput
  }

  /**
   * Tokens upsert
   */
  export type TokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * The filter to search for the Tokens to update in case it exists.
     */
    where: TokensWhereUniqueInput
    /**
     * In case the Tokens found by the `where` argument doesn't exist, create a new Tokens with this data.
     */
    create: XOR<TokensCreateInput, TokensUncheckedCreateInput>
    /**
     * In case the Tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokensUpdateInput, TokensUncheckedUpdateInput>
  }

  /**
   * Tokens delete
   */
  export type TokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter which Tokens to delete.
     */
    where: TokensWhereUniqueInput
  }

  /**
   * Tokens deleteMany
   */
  export type TokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokensWhereInput
  }

  /**
   * Tokens without action
   */
  export type TokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokensInclude<ExtArgs> | null
  }


  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    auth_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    auth_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    nickName: string | null
    phone: string | null
    active: boolean | null
    bornDate: Date | null
    auth_id: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    nickName: string | null
    phone: string | null
    active: boolean | null
    bornDate: Date | null
    auth_id: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    nickName: number
    phone: number
    active: number
    bornDate: number
    auth_id: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    auth_id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    auth_id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    nickName?: true
    phone?: true
    active?: true
    bornDate?: true
    auth_id?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    nickName?: true
    phone?: true
    active?: true
    bornDate?: true
    auth_id?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    nickName?: true
    phone?: true
    active?: true
    bornDate?: true
    auth_id?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    nickName: string
    phone: string
    active: boolean
    bornDate: Date
    auth_id: number
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nickName?: boolean
    phone?: boolean
    active?: boolean
    bornDate?: boolean
    auth_id?: boolean
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nickName?: boolean
    phone?: boolean
    active?: boolean
    bornDate?: boolean
    auth_id?: boolean
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    nickName?: boolean
    phone?: boolean
    active?: boolean
    bornDate?: boolean
    auth_id?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auths?: boolean | AuthsDefaultArgs<ExtArgs>
  }

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      auths: Prisma.$AuthsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nickName: string
      phone: string
      active: boolean
      bornDate: Date
      auth_id: number
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    auths<T extends AuthsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuthsDefaultArgs<ExtArgs>>): Prisma__AuthsClient<$Result.GetResult<Prisma.$AuthsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly nickName: FieldRef<"Users", 'String'>
    readonly phone: FieldRef<"Users", 'String'>
    readonly active: FieldRef<"Users", 'Boolean'>
    readonly bornDate: FieldRef<"Users", 'DateTime'>
    readonly auth_id: FieldRef<"Users", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Countries
   */

  export type AggregateCountries = {
    _count: CountriesCountAggregateOutputType | null
    _avg: CountriesAvgAggregateOutputType | null
    _sum: CountriesSumAggregateOutputType | null
    _min: CountriesMinAggregateOutputType | null
    _max: CountriesMaxAggregateOutputType | null
  }

  export type CountriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CountriesSumAggregateOutputType = {
    id: number | null
  }

  export type CountriesMinAggregateOutputType = {
    id: number | null
    country_name: string | null
    acronym: string | null
  }

  export type CountriesMaxAggregateOutputType = {
    id: number | null
    country_name: string | null
    acronym: string | null
  }

  export type CountriesCountAggregateOutputType = {
    id: number
    country_name: number
    acronym: number
    _all: number
  }


  export type CountriesAvgAggregateInputType = {
    id?: true
  }

  export type CountriesSumAggregateInputType = {
    id?: true
  }

  export type CountriesMinAggregateInputType = {
    id?: true
    country_name?: true
    acronym?: true
  }

  export type CountriesMaxAggregateInputType = {
    id?: true
    country_name?: true
    acronym?: true
  }

  export type CountriesCountAggregateInputType = {
    id?: true
    country_name?: true
    acronym?: true
    _all?: true
  }

  export type CountriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to aggregate.
     */
    where?: CountriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountriesOrderByWithRelationInput | CountriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountriesMaxAggregateInputType
  }

  export type GetCountriesAggregateType<T extends CountriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCountries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountries[P]>
      : GetScalarType<T[P], AggregateCountries[P]>
  }




  export type CountriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountriesWhereInput
    orderBy?: CountriesOrderByWithAggregationInput | CountriesOrderByWithAggregationInput[]
    by: CountriesScalarFieldEnum[] | CountriesScalarFieldEnum
    having?: CountriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountriesCountAggregateInputType | true
    _avg?: CountriesAvgAggregateInputType
    _sum?: CountriesSumAggregateInputType
    _min?: CountriesMinAggregateInputType
    _max?: CountriesMaxAggregateInputType
  }

  export type CountriesGroupByOutputType = {
    id: number
    country_name: string | null
    acronym: string | null
    _count: CountriesCountAggregateOutputType | null
    _avg: CountriesAvgAggregateOutputType | null
    _sum: CountriesSumAggregateOutputType | null
    _min: CountriesMinAggregateOutputType | null
    _max: CountriesMaxAggregateOutputType | null
  }

  type GetCountriesGroupByPayload<T extends CountriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountriesGroupByOutputType[P]>
            : GetScalarType<T[P], CountriesGroupByOutputType[P]>
        }
      >
    >


  export type CountriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    country_name?: boolean
    acronym?: boolean
  }, ExtArgs["result"]["countries"]>

  export type CountriesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    country_name?: boolean
    acronym?: boolean
  }, ExtArgs["result"]["countries"]>

  export type CountriesSelectScalar = {
    id?: boolean
    country_name?: boolean
    acronym?: boolean
  }


  export type $CountriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Countries"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      country_name: string | null
      acronym: string | null
    }, ExtArgs["result"]["countries"]>
    composites: {}
  }

  type CountriesGetPayload<S extends boolean | null | undefined | CountriesDefaultArgs> = $Result.GetResult<Prisma.$CountriesPayload, S>

  type CountriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CountriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CountriesCountAggregateInputType | true
    }

  export interface CountriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Countries'], meta: { name: 'Countries' } }
    /**
     * Find zero or one Countries that matches the filter.
     * @param {CountriesFindUniqueArgs} args - Arguments to find a Countries
     * @example
     * // Get one Countries
     * const countries = await prisma.countries.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CountriesFindUniqueArgs>(args: SelectSubset<T, CountriesFindUniqueArgs<ExtArgs>>): Prisma__CountriesClient<$Result.GetResult<Prisma.$CountriesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Countries that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CountriesFindUniqueOrThrowArgs} args - Arguments to find a Countries
     * @example
     * // Get one Countries
     * const countries = await prisma.countries.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CountriesFindUniqueOrThrowArgs>(args: SelectSubset<T, CountriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CountriesClient<$Result.GetResult<Prisma.$CountriesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountriesFindFirstArgs} args - Arguments to find a Countries
     * @example
     * // Get one Countries
     * const countries = await prisma.countries.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CountriesFindFirstArgs>(args?: SelectSubset<T, CountriesFindFirstArgs<ExtArgs>>): Prisma__CountriesClient<$Result.GetResult<Prisma.$CountriesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Countries that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountriesFindFirstOrThrowArgs} args - Arguments to find a Countries
     * @example
     * // Get one Countries
     * const countries = await prisma.countries.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CountriesFindFirstOrThrowArgs>(args?: SelectSubset<T, CountriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__CountriesClient<$Result.GetResult<Prisma.$CountriesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.countries.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.countries.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countriesWithIdOnly = await prisma.countries.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CountriesFindManyArgs>(args?: SelectSubset<T, CountriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountriesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Countries.
     * @param {CountriesCreateArgs} args - Arguments to create a Countries.
     * @example
     * // Create one Countries
     * const Countries = await prisma.countries.create({
     *   data: {
     *     // ... data to create a Countries
     *   }
     * })
     * 
     */
    create<T extends CountriesCreateArgs>(args: SelectSubset<T, CountriesCreateArgs<ExtArgs>>): Prisma__CountriesClient<$Result.GetResult<Prisma.$CountriesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Countries.
     * @param {CountriesCreateManyArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const countries = await prisma.countries.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CountriesCreateManyArgs>(args?: SelectSubset<T, CountriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Countries and returns the data saved in the database.
     * @param {CountriesCreateManyAndReturnArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const countries = await prisma.countries.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Countries and only return the `id`
     * const countriesWithIdOnly = await prisma.countries.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CountriesCreateManyAndReturnArgs>(args?: SelectSubset<T, CountriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountriesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Countries.
     * @param {CountriesDeleteArgs} args - Arguments to delete one Countries.
     * @example
     * // Delete one Countries
     * const Countries = await prisma.countries.delete({
     *   where: {
     *     // ... filter to delete one Countries
     *   }
     * })
     * 
     */
    delete<T extends CountriesDeleteArgs>(args: SelectSubset<T, CountriesDeleteArgs<ExtArgs>>): Prisma__CountriesClient<$Result.GetResult<Prisma.$CountriesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Countries.
     * @param {CountriesUpdateArgs} args - Arguments to update one Countries.
     * @example
     * // Update one Countries
     * const countries = await prisma.countries.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CountriesUpdateArgs>(args: SelectSubset<T, CountriesUpdateArgs<ExtArgs>>): Prisma__CountriesClient<$Result.GetResult<Prisma.$CountriesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Countries.
     * @param {CountriesDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.countries.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CountriesDeleteManyArgs>(args?: SelectSubset<T, CountriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const countries = await prisma.countries.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CountriesUpdateManyArgs>(args: SelectSubset<T, CountriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Countries.
     * @param {CountriesUpsertArgs} args - Arguments to update or create a Countries.
     * @example
     * // Update or create a Countries
     * const countries = await prisma.countries.upsert({
     *   create: {
     *     // ... data to create a Countries
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Countries we want to update
     *   }
     * })
     */
    upsert<T extends CountriesUpsertArgs>(args: SelectSubset<T, CountriesUpsertArgs<ExtArgs>>): Prisma__CountriesClient<$Result.GetResult<Prisma.$CountriesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountriesCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.countries.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountriesCountArgs>(
      args?: Subset<T, CountriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountriesAggregateArgs>(args: Subset<T, CountriesAggregateArgs>): Prisma.PrismaPromise<GetCountriesAggregateType<T>>

    /**
     * Group by Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountriesGroupByArgs['orderBy'] }
        : { orderBy?: CountriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Countries model
   */
  readonly fields: CountriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Countries.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Countries model
   */ 
  interface CountriesFieldRefs {
    readonly id: FieldRef<"Countries", 'Int'>
    readonly country_name: FieldRef<"Countries", 'String'>
    readonly acronym: FieldRef<"Countries", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Countries findUnique
   */
  export type CountriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Countries
     */
    select?: CountriesSelect<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where: CountriesWhereUniqueInput
  }

  /**
   * Countries findUniqueOrThrow
   */
  export type CountriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Countries
     */
    select?: CountriesSelect<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where: CountriesWhereUniqueInput
  }

  /**
   * Countries findFirst
   */
  export type CountriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Countries
     */
    select?: CountriesSelect<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountriesOrderByWithRelationInput | CountriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountriesScalarFieldEnum | CountriesScalarFieldEnum[]
  }

  /**
   * Countries findFirstOrThrow
   */
  export type CountriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Countries
     */
    select?: CountriesSelect<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountriesOrderByWithRelationInput | CountriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountriesScalarFieldEnum | CountriesScalarFieldEnum[]
  }

  /**
   * Countries findMany
   */
  export type CountriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Countries
     */
    select?: CountriesSelect<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountriesOrderByWithRelationInput | CountriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountriesScalarFieldEnum | CountriesScalarFieldEnum[]
  }

  /**
   * Countries create
   */
  export type CountriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Countries
     */
    select?: CountriesSelect<ExtArgs> | null
    /**
     * The data needed to create a Countries.
     */
    data?: XOR<CountriesCreateInput, CountriesUncheckedCreateInput>
  }

  /**
   * Countries createMany
   */
  export type CountriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Countries.
     */
    data: CountriesCreateManyInput | CountriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Countries createManyAndReturn
   */
  export type CountriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Countries
     */
    select?: CountriesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Countries.
     */
    data: CountriesCreateManyInput | CountriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Countries update
   */
  export type CountriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Countries
     */
    select?: CountriesSelect<ExtArgs> | null
    /**
     * The data needed to update a Countries.
     */
    data: XOR<CountriesUpdateInput, CountriesUncheckedUpdateInput>
    /**
     * Choose, which Countries to update.
     */
    where: CountriesWhereUniqueInput
  }

  /**
   * Countries updateMany
   */
  export type CountriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountriesUpdateManyMutationInput, CountriesUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountriesWhereInput
  }

  /**
   * Countries upsert
   */
  export type CountriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Countries
     */
    select?: CountriesSelect<ExtArgs> | null
    /**
     * The filter to search for the Countries to update in case it exists.
     */
    where: CountriesWhereUniqueInput
    /**
     * In case the Countries found by the `where` argument doesn't exist, create a new Countries with this data.
     */
    create: XOR<CountriesCreateInput, CountriesUncheckedCreateInput>
    /**
     * In case the Countries was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountriesUpdateInput, CountriesUncheckedUpdateInput>
  }

  /**
   * Countries delete
   */
  export type CountriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Countries
     */
    select?: CountriesSelect<ExtArgs> | null
    /**
     * Filter which Countries to delete.
     */
    where: CountriesWhereUniqueInput
  }

  /**
   * Countries deleteMany
   */
  export type CountriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountriesWhereInput
  }

  /**
   * Countries without action
   */
  export type CountriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Countries
     */
    select?: CountriesSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Auth_rolesScalarFieldEnum: {
    auth_id: 'auth_id',
    role_id: 'role_id'
  };

  export type Auth_rolesScalarFieldEnum = (typeof Auth_rolesScalarFieldEnum)[keyof typeof Auth_rolesScalarFieldEnum]


  export const AuthsScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    active: 'active',
    password: 'password'
  };

  export type AuthsScalarFieldEnum = (typeof AuthsScalarFieldEnum)[keyof typeof AuthsScalarFieldEnum]


  export const EventsScalarFieldEnum: {
    id: 'id',
    event_initial_date: 'event_initial_date',
    event_end_date: 'event_end_date',
    location: 'location',
    city: 'city',
    country: 'country'
  };

  export type EventsScalarFieldEnum = (typeof EventsScalarFieldEnum)[keyof typeof EventsScalarFieldEnum]


  export const RolesScalarFieldEnum: {
    id: 'id',
    roleName: 'roleName'
  };

  export type RolesScalarFieldEnum = (typeof RolesScalarFieldEnum)[keyof typeof RolesScalarFieldEnum]


  export const Ticket_typeScalarFieldEnum: {
    id: 'id',
    description: 'description',
    acronym: 'acronym'
  };

  export type Ticket_typeScalarFieldEnum = (typeof Ticket_typeScalarFieldEnum)[keyof typeof Ticket_typeScalarFieldEnum]


  export const Ticket_userScalarFieldEnum: {
    ticket_id: 'ticket_id',
    user_id: 'user_id',
    purchase_date: 'purchase_date',
    quantity: 'quantity'
  };

  export type Ticket_userScalarFieldEnum = (typeof Ticket_userScalarFieldEnum)[keyof typeof Ticket_userScalarFieldEnum]


  export const TicketsScalarFieldEnum: {
    id: 'id',
    value: 'value',
    event_id: 'event_id',
    ticket_type_id: 'ticket_type_id'
  };

  export type TicketsScalarFieldEnum = (typeof TicketsScalarFieldEnum)[keyof typeof TicketsScalarFieldEnum]


  export const TokensScalarFieldEnum: {
    id: 'id',
    key: 'key',
    auth_id: 'auth_id'
  };

  export type TokensScalarFieldEnum = (typeof TokensScalarFieldEnum)[keyof typeof TokensScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    nickName: 'nickName',
    phone: 'phone',
    active: 'active',
    bornDate: 'bornDate',
    auth_id: 'auth_id'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const CountriesScalarFieldEnum: {
    id: 'id',
    country_name: 'country_name',
    acronym: 'acronym'
  };

  export type CountriesScalarFieldEnum = (typeof CountriesScalarFieldEnum)[keyof typeof CountriesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'RoleNames'
   */
  export type EnumRoleNamesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleNames'>
    


  /**
   * Reference to a field of type 'RoleNames[]'
   */
  export type ListEnumRoleNamesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleNames[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type Auth_rolesWhereInput = {
    AND?: Auth_rolesWhereInput | Auth_rolesWhereInput[]
    OR?: Auth_rolesWhereInput[]
    NOT?: Auth_rolesWhereInput | Auth_rolesWhereInput[]
    auth_id?: IntFilter<"Auth_roles"> | number
    role_id?: IntFilter<"Auth_roles"> | number
    auths?: XOR<AuthsRelationFilter, AuthsWhereInput>
    roles?: XOR<RolesRelationFilter, RolesWhereInput>
  }

  export type Auth_rolesOrderByWithRelationInput = {
    auth_id?: SortOrder
    role_id?: SortOrder
    auths?: AuthsOrderByWithRelationInput
    roles?: RolesOrderByWithRelationInput
  }

  export type Auth_rolesWhereUniqueInput = Prisma.AtLeast<{
    auth_id_role_id?: Auth_rolesAuth_idRole_idCompoundUniqueInput
    AND?: Auth_rolesWhereInput | Auth_rolesWhereInput[]
    OR?: Auth_rolesWhereInput[]
    NOT?: Auth_rolesWhereInput | Auth_rolesWhereInput[]
    auth_id?: IntFilter<"Auth_roles"> | number
    role_id?: IntFilter<"Auth_roles"> | number
    auths?: XOR<AuthsRelationFilter, AuthsWhereInput>
    roles?: XOR<RolesRelationFilter, RolesWhereInput>
  }, "auth_id_role_id">

  export type Auth_rolesOrderByWithAggregationInput = {
    auth_id?: SortOrder
    role_id?: SortOrder
    _count?: Auth_rolesCountOrderByAggregateInput
    _avg?: Auth_rolesAvgOrderByAggregateInput
    _max?: Auth_rolesMaxOrderByAggregateInput
    _min?: Auth_rolesMinOrderByAggregateInput
    _sum?: Auth_rolesSumOrderByAggregateInput
  }

  export type Auth_rolesScalarWhereWithAggregatesInput = {
    AND?: Auth_rolesScalarWhereWithAggregatesInput | Auth_rolesScalarWhereWithAggregatesInput[]
    OR?: Auth_rolesScalarWhereWithAggregatesInput[]
    NOT?: Auth_rolesScalarWhereWithAggregatesInput | Auth_rolesScalarWhereWithAggregatesInput[]
    auth_id?: IntWithAggregatesFilter<"Auth_roles"> | number
    role_id?: IntWithAggregatesFilter<"Auth_roles"> | number
  }

  export type AuthsWhereInput = {
    AND?: AuthsWhereInput | AuthsWhereInput[]
    OR?: AuthsWhereInput[]
    NOT?: AuthsWhereInput | AuthsWhereInput[]
    id?: IntFilter<"Auths"> | number
    username?: StringFilter<"Auths"> | string
    email?: StringFilter<"Auths"> | string
    active?: BoolFilter<"Auths"> | boolean
    password?: StringFilter<"Auths"> | string
    auth_roles?: Auth_rolesListRelationFilter
    tokens?: XOR<TokensNullableRelationFilter, TokensWhereInput> | null
    users?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }

  export type AuthsOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    active?: SortOrder
    password?: SortOrder
    auth_roles?: Auth_rolesOrderByRelationAggregateInput
    tokens?: TokensOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type AuthsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuthsWhereInput | AuthsWhereInput[]
    OR?: AuthsWhereInput[]
    NOT?: AuthsWhereInput | AuthsWhereInput[]
    username?: StringFilter<"Auths"> | string
    email?: StringFilter<"Auths"> | string
    active?: BoolFilter<"Auths"> | boolean
    password?: StringFilter<"Auths"> | string
    auth_roles?: Auth_rolesListRelationFilter
    tokens?: XOR<TokensNullableRelationFilter, TokensWhereInput> | null
    users?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }, "id">

  export type AuthsOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    active?: SortOrder
    password?: SortOrder
    _count?: AuthsCountOrderByAggregateInput
    _avg?: AuthsAvgOrderByAggregateInput
    _max?: AuthsMaxOrderByAggregateInput
    _min?: AuthsMinOrderByAggregateInput
    _sum?: AuthsSumOrderByAggregateInput
  }

  export type AuthsScalarWhereWithAggregatesInput = {
    AND?: AuthsScalarWhereWithAggregatesInput | AuthsScalarWhereWithAggregatesInput[]
    OR?: AuthsScalarWhereWithAggregatesInput[]
    NOT?: AuthsScalarWhereWithAggregatesInput | AuthsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Auths"> | number
    username?: StringWithAggregatesFilter<"Auths"> | string
    email?: StringWithAggregatesFilter<"Auths"> | string
    active?: BoolWithAggregatesFilter<"Auths"> | boolean
    password?: StringWithAggregatesFilter<"Auths"> | string
  }

  export type EventsWhereInput = {
    AND?: EventsWhereInput | EventsWhereInput[]
    OR?: EventsWhereInput[]
    NOT?: EventsWhereInput | EventsWhereInput[]
    id?: BigIntFilter<"Events"> | bigint | number
    event_initial_date?: DateTimeNullableFilter<"Events"> | Date | string | null
    event_end_date?: DateTimeNullableFilter<"Events"> | Date | string | null
    location?: StringNullableFilter<"Events"> | string | null
    city?: StringNullableFilter<"Events"> | string | null
    country?: StringNullableFilter<"Events"> | string | null
    tickets?: TicketsListRelationFilter
  }

  export type EventsOrderByWithRelationInput = {
    id?: SortOrder
    event_initial_date?: SortOrderInput | SortOrder
    event_end_date?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    tickets?: TicketsOrderByRelationAggregateInput
  }

  export type EventsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: EventsWhereInput | EventsWhereInput[]
    OR?: EventsWhereInput[]
    NOT?: EventsWhereInput | EventsWhereInput[]
    event_initial_date?: DateTimeNullableFilter<"Events"> | Date | string | null
    event_end_date?: DateTimeNullableFilter<"Events"> | Date | string | null
    location?: StringNullableFilter<"Events"> | string | null
    city?: StringNullableFilter<"Events"> | string | null
    country?: StringNullableFilter<"Events"> | string | null
    tickets?: TicketsListRelationFilter
  }, "id">

  export type EventsOrderByWithAggregationInput = {
    id?: SortOrder
    event_initial_date?: SortOrderInput | SortOrder
    event_end_date?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    _count?: EventsCountOrderByAggregateInput
    _avg?: EventsAvgOrderByAggregateInput
    _max?: EventsMaxOrderByAggregateInput
    _min?: EventsMinOrderByAggregateInput
    _sum?: EventsSumOrderByAggregateInput
  }

  export type EventsScalarWhereWithAggregatesInput = {
    AND?: EventsScalarWhereWithAggregatesInput | EventsScalarWhereWithAggregatesInput[]
    OR?: EventsScalarWhereWithAggregatesInput[]
    NOT?: EventsScalarWhereWithAggregatesInput | EventsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Events"> | bigint | number
    event_initial_date?: DateTimeNullableWithAggregatesFilter<"Events"> | Date | string | null
    event_end_date?: DateTimeNullableWithAggregatesFilter<"Events"> | Date | string | null
    location?: StringNullableWithAggregatesFilter<"Events"> | string | null
    city?: StringNullableWithAggregatesFilter<"Events"> | string | null
    country?: StringNullableWithAggregatesFilter<"Events"> | string | null
  }

  export type RolesWhereInput = {
    AND?: RolesWhereInput | RolesWhereInput[]
    OR?: RolesWhereInput[]
    NOT?: RolesWhereInput | RolesWhereInput[]
    id?: IntFilter<"Roles"> | number
    roleName?: EnumRoleNamesFilter<"Roles"> | $Enums.RoleNames
    auth_roles?: Auth_rolesListRelationFilter
  }

  export type RolesOrderByWithRelationInput = {
    id?: SortOrder
    roleName?: SortOrder
    auth_roles?: Auth_rolesOrderByRelationAggregateInput
  }

  export type RolesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RolesWhereInput | RolesWhereInput[]
    OR?: RolesWhereInput[]
    NOT?: RolesWhereInput | RolesWhereInput[]
    roleName?: EnumRoleNamesFilter<"Roles"> | $Enums.RoleNames
    auth_roles?: Auth_rolesListRelationFilter
  }, "id">

  export type RolesOrderByWithAggregationInput = {
    id?: SortOrder
    roleName?: SortOrder
    _count?: RolesCountOrderByAggregateInput
    _avg?: RolesAvgOrderByAggregateInput
    _max?: RolesMaxOrderByAggregateInput
    _min?: RolesMinOrderByAggregateInput
    _sum?: RolesSumOrderByAggregateInput
  }

  export type RolesScalarWhereWithAggregatesInput = {
    AND?: RolesScalarWhereWithAggregatesInput | RolesScalarWhereWithAggregatesInput[]
    OR?: RolesScalarWhereWithAggregatesInput[]
    NOT?: RolesScalarWhereWithAggregatesInput | RolesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Roles"> | number
    roleName?: EnumRoleNamesWithAggregatesFilter<"Roles"> | $Enums.RoleNames
  }

  export type Ticket_typeWhereInput = {
    AND?: Ticket_typeWhereInput | Ticket_typeWhereInput[]
    OR?: Ticket_typeWhereInput[]
    NOT?: Ticket_typeWhereInput | Ticket_typeWhereInput[]
    id?: IntFilter<"Ticket_type"> | number
    description?: StringNullableFilter<"Ticket_type"> | string | null
    acronym?: StringNullableFilter<"Ticket_type"> | string | null
    tickets?: TicketsListRelationFilter
  }

  export type Ticket_typeOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    acronym?: SortOrderInput | SortOrder
    tickets?: TicketsOrderByRelationAggregateInput
  }

  export type Ticket_typeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Ticket_typeWhereInput | Ticket_typeWhereInput[]
    OR?: Ticket_typeWhereInput[]
    NOT?: Ticket_typeWhereInput | Ticket_typeWhereInput[]
    description?: StringNullableFilter<"Ticket_type"> | string | null
    acronym?: StringNullableFilter<"Ticket_type"> | string | null
    tickets?: TicketsListRelationFilter
  }, "id">

  export type Ticket_typeOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    acronym?: SortOrderInput | SortOrder
    _count?: Ticket_typeCountOrderByAggregateInput
    _avg?: Ticket_typeAvgOrderByAggregateInput
    _max?: Ticket_typeMaxOrderByAggregateInput
    _min?: Ticket_typeMinOrderByAggregateInput
    _sum?: Ticket_typeSumOrderByAggregateInput
  }

  export type Ticket_typeScalarWhereWithAggregatesInput = {
    AND?: Ticket_typeScalarWhereWithAggregatesInput | Ticket_typeScalarWhereWithAggregatesInput[]
    OR?: Ticket_typeScalarWhereWithAggregatesInput[]
    NOT?: Ticket_typeScalarWhereWithAggregatesInput | Ticket_typeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ticket_type"> | number
    description?: StringNullableWithAggregatesFilter<"Ticket_type"> | string | null
    acronym?: StringNullableWithAggregatesFilter<"Ticket_type"> | string | null
  }

  export type Ticket_userWhereInput = {
    AND?: Ticket_userWhereInput | Ticket_userWhereInput[]
    OR?: Ticket_userWhereInput[]
    NOT?: Ticket_userWhereInput | Ticket_userWhereInput[]
    ticket_id?: IntFilter<"Ticket_user"> | number
    user_id?: IntFilter<"Ticket_user"> | number
    purchase_date?: DateTimeFilter<"Ticket_user"> | Date | string
    quantity?: IntNullableFilter<"Ticket_user"> | number | null
    tickets?: XOR<TicketsRelationFilter, TicketsWhereInput>
  }

  export type Ticket_userOrderByWithRelationInput = {
    ticket_id?: SortOrder
    user_id?: SortOrder
    purchase_date?: SortOrder
    quantity?: SortOrderInput | SortOrder
    tickets?: TicketsOrderByWithRelationInput
  }

  export type Ticket_userWhereUniqueInput = Prisma.AtLeast<{
    ticket_id_user_id_purchase_date?: Ticket_userTicket_idUser_idPurchase_dateCompoundUniqueInput
    AND?: Ticket_userWhereInput | Ticket_userWhereInput[]
    OR?: Ticket_userWhereInput[]
    NOT?: Ticket_userWhereInput | Ticket_userWhereInput[]
    ticket_id?: IntFilter<"Ticket_user"> | number
    user_id?: IntFilter<"Ticket_user"> | number
    purchase_date?: DateTimeFilter<"Ticket_user"> | Date | string
    quantity?: IntNullableFilter<"Ticket_user"> | number | null
    tickets?: XOR<TicketsRelationFilter, TicketsWhereInput>
  }, "ticket_id_user_id_purchase_date">

  export type Ticket_userOrderByWithAggregationInput = {
    ticket_id?: SortOrder
    user_id?: SortOrder
    purchase_date?: SortOrder
    quantity?: SortOrderInput | SortOrder
    _count?: Ticket_userCountOrderByAggregateInput
    _avg?: Ticket_userAvgOrderByAggregateInput
    _max?: Ticket_userMaxOrderByAggregateInput
    _min?: Ticket_userMinOrderByAggregateInput
    _sum?: Ticket_userSumOrderByAggregateInput
  }

  export type Ticket_userScalarWhereWithAggregatesInput = {
    AND?: Ticket_userScalarWhereWithAggregatesInput | Ticket_userScalarWhereWithAggregatesInput[]
    OR?: Ticket_userScalarWhereWithAggregatesInput[]
    NOT?: Ticket_userScalarWhereWithAggregatesInput | Ticket_userScalarWhereWithAggregatesInput[]
    ticket_id?: IntWithAggregatesFilter<"Ticket_user"> | number
    user_id?: IntWithAggregatesFilter<"Ticket_user"> | number
    purchase_date?: DateTimeWithAggregatesFilter<"Ticket_user"> | Date | string
    quantity?: IntNullableWithAggregatesFilter<"Ticket_user"> | number | null
  }

  export type TicketsWhereInput = {
    AND?: TicketsWhereInput | TicketsWhereInput[]
    OR?: TicketsWhereInput[]
    NOT?: TicketsWhereInput | TicketsWhereInput[]
    id?: IntFilter<"Tickets"> | number
    value?: DecimalNullableFilter<"Tickets"> | Decimal | DecimalJsLike | number | string | null
    event_id?: BigIntNullableFilter<"Tickets"> | bigint | number | null
    ticket_type_id?: IntNullableFilter<"Tickets"> | number | null
    ticket_user?: Ticket_userListRelationFilter
    events?: XOR<EventsNullableRelationFilter, EventsWhereInput> | null
    ticket_type?: XOR<Ticket_typeNullableRelationFilter, Ticket_typeWhereInput> | null
  }

  export type TicketsOrderByWithRelationInput = {
    id?: SortOrder
    value?: SortOrderInput | SortOrder
    event_id?: SortOrderInput | SortOrder
    ticket_type_id?: SortOrderInput | SortOrder
    ticket_user?: Ticket_userOrderByRelationAggregateInput
    events?: EventsOrderByWithRelationInput
    ticket_type?: Ticket_typeOrderByWithRelationInput
  }

  export type TicketsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TicketsWhereInput | TicketsWhereInput[]
    OR?: TicketsWhereInput[]
    NOT?: TicketsWhereInput | TicketsWhereInput[]
    value?: DecimalNullableFilter<"Tickets"> | Decimal | DecimalJsLike | number | string | null
    event_id?: BigIntNullableFilter<"Tickets"> | bigint | number | null
    ticket_type_id?: IntNullableFilter<"Tickets"> | number | null
    ticket_user?: Ticket_userListRelationFilter
    events?: XOR<EventsNullableRelationFilter, EventsWhereInput> | null
    ticket_type?: XOR<Ticket_typeNullableRelationFilter, Ticket_typeWhereInput> | null
  }, "id">

  export type TicketsOrderByWithAggregationInput = {
    id?: SortOrder
    value?: SortOrderInput | SortOrder
    event_id?: SortOrderInput | SortOrder
    ticket_type_id?: SortOrderInput | SortOrder
    _count?: TicketsCountOrderByAggregateInput
    _avg?: TicketsAvgOrderByAggregateInput
    _max?: TicketsMaxOrderByAggregateInput
    _min?: TicketsMinOrderByAggregateInput
    _sum?: TicketsSumOrderByAggregateInput
  }

  export type TicketsScalarWhereWithAggregatesInput = {
    AND?: TicketsScalarWhereWithAggregatesInput | TicketsScalarWhereWithAggregatesInput[]
    OR?: TicketsScalarWhereWithAggregatesInput[]
    NOT?: TicketsScalarWhereWithAggregatesInput | TicketsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tickets"> | number
    value?: DecimalNullableWithAggregatesFilter<"Tickets"> | Decimal | DecimalJsLike | number | string | null
    event_id?: BigIntNullableWithAggregatesFilter<"Tickets"> | bigint | number | null
    ticket_type_id?: IntNullableWithAggregatesFilter<"Tickets"> | number | null
  }

  export type TokensWhereInput = {
    AND?: TokensWhereInput | TokensWhereInput[]
    OR?: TokensWhereInput[]
    NOT?: TokensWhereInput | TokensWhereInput[]
    id?: IntFilter<"Tokens"> | number
    key?: StringFilter<"Tokens"> | string
    auth_id?: IntFilter<"Tokens"> | number
    auths?: XOR<AuthsRelationFilter, AuthsWhereInput>
  }

  export type TokensOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    auth_id?: SortOrder
    auths?: AuthsOrderByWithRelationInput
  }

  export type TokensWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    auth_id?: number
    AND?: TokensWhereInput | TokensWhereInput[]
    OR?: TokensWhereInput[]
    NOT?: TokensWhereInput | TokensWhereInput[]
    key?: StringFilter<"Tokens"> | string
    auths?: XOR<AuthsRelationFilter, AuthsWhereInput>
  }, "id" | "auth_id">

  export type TokensOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    auth_id?: SortOrder
    _count?: TokensCountOrderByAggregateInput
    _avg?: TokensAvgOrderByAggregateInput
    _max?: TokensMaxOrderByAggregateInput
    _min?: TokensMinOrderByAggregateInput
    _sum?: TokensSumOrderByAggregateInput
  }

  export type TokensScalarWhereWithAggregatesInput = {
    AND?: TokensScalarWhereWithAggregatesInput | TokensScalarWhereWithAggregatesInput[]
    OR?: TokensScalarWhereWithAggregatesInput[]
    NOT?: TokensScalarWhereWithAggregatesInput | TokensScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tokens"> | number
    key?: StringWithAggregatesFilter<"Tokens"> | string
    auth_id?: IntWithAggregatesFilter<"Tokens"> | number
  }

  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    nickName?: StringFilter<"Users"> | string
    phone?: StringFilter<"Users"> | string
    active?: BoolFilter<"Users"> | boolean
    bornDate?: DateTimeFilter<"Users"> | Date | string
    auth_id?: IntFilter<"Users"> | number
    auths?: XOR<AuthsRelationFilter, AuthsWhereInput>
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    nickName?: SortOrder
    phone?: SortOrder
    active?: SortOrder
    bornDate?: SortOrder
    auth_id?: SortOrder
    auths?: AuthsOrderByWithRelationInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    auth_id?: number
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    nickName?: StringFilter<"Users"> | string
    phone?: StringFilter<"Users"> | string
    active?: BoolFilter<"Users"> | boolean
    bornDate?: DateTimeFilter<"Users"> | Date | string
    auths?: XOR<AuthsRelationFilter, AuthsWhereInput>
  }, "id" | "auth_id">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    nickName?: SortOrder
    phone?: SortOrder
    active?: SortOrder
    bornDate?: SortOrder
    auth_id?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    nickName?: StringWithAggregatesFilter<"Users"> | string
    phone?: StringWithAggregatesFilter<"Users"> | string
    active?: BoolWithAggregatesFilter<"Users"> | boolean
    bornDate?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    auth_id?: IntWithAggregatesFilter<"Users"> | number
  }

  export type CountriesWhereInput = {
    AND?: CountriesWhereInput | CountriesWhereInput[]
    OR?: CountriesWhereInput[]
    NOT?: CountriesWhereInput | CountriesWhereInput[]
    id?: IntFilter<"Countries"> | number
    country_name?: StringNullableFilter<"Countries"> | string | null
    acronym?: StringNullableFilter<"Countries"> | string | null
  }

  export type CountriesOrderByWithRelationInput = {
    id?: SortOrder
    country_name?: SortOrderInput | SortOrder
    acronym?: SortOrderInput | SortOrder
  }

  export type CountriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CountriesWhereInput | CountriesWhereInput[]
    OR?: CountriesWhereInput[]
    NOT?: CountriesWhereInput | CountriesWhereInput[]
    country_name?: StringNullableFilter<"Countries"> | string | null
    acronym?: StringNullableFilter<"Countries"> | string | null
  }, "id">

  export type CountriesOrderByWithAggregationInput = {
    id?: SortOrder
    country_name?: SortOrderInput | SortOrder
    acronym?: SortOrderInput | SortOrder
    _count?: CountriesCountOrderByAggregateInput
    _avg?: CountriesAvgOrderByAggregateInput
    _max?: CountriesMaxOrderByAggregateInput
    _min?: CountriesMinOrderByAggregateInput
    _sum?: CountriesSumOrderByAggregateInput
  }

  export type CountriesScalarWhereWithAggregatesInput = {
    AND?: CountriesScalarWhereWithAggregatesInput | CountriesScalarWhereWithAggregatesInput[]
    OR?: CountriesScalarWhereWithAggregatesInput[]
    NOT?: CountriesScalarWhereWithAggregatesInput | CountriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Countries"> | number
    country_name?: StringNullableWithAggregatesFilter<"Countries"> | string | null
    acronym?: StringNullableWithAggregatesFilter<"Countries"> | string | null
  }

  export type Auth_rolesCreateInput = {
    auths: AuthsCreateNestedOneWithoutAuth_rolesInput
    roles: RolesCreateNestedOneWithoutAuth_rolesInput
  }

  export type Auth_rolesUncheckedCreateInput = {
    auth_id: number
    role_id: number
  }

  export type Auth_rolesUpdateInput = {
    auths?: AuthsUpdateOneRequiredWithoutAuth_rolesNestedInput
    roles?: RolesUpdateOneRequiredWithoutAuth_rolesNestedInput
  }

  export type Auth_rolesUncheckedUpdateInput = {
    auth_id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
  }

  export type Auth_rolesCreateManyInput = {
    auth_id: number
    role_id: number
  }

  export type Auth_rolesUpdateManyMutationInput = {

  }

  export type Auth_rolesUncheckedUpdateManyInput = {
    auth_id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
  }

  export type AuthsCreateInput = {
    username: string
    email: string
    active: boolean
    password: string
    auth_roles?: Auth_rolesCreateNestedManyWithoutAuthsInput
    tokens?: TokensCreateNestedOneWithoutAuthsInput
    users?: UsersCreateNestedOneWithoutAuthsInput
  }

  export type AuthsUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    active: boolean
    password: string
    auth_roles?: Auth_rolesUncheckedCreateNestedManyWithoutAuthsInput
    tokens?: TokensUncheckedCreateNestedOneWithoutAuthsInput
    users?: UsersUncheckedCreateNestedOneWithoutAuthsInput
  }

  export type AuthsUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    auth_roles?: Auth_rolesUpdateManyWithoutAuthsNestedInput
    tokens?: TokensUpdateOneWithoutAuthsNestedInput
    users?: UsersUpdateOneWithoutAuthsNestedInput
  }

  export type AuthsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    auth_roles?: Auth_rolesUncheckedUpdateManyWithoutAuthsNestedInput
    tokens?: TokensUncheckedUpdateOneWithoutAuthsNestedInput
    users?: UsersUncheckedUpdateOneWithoutAuthsNestedInput
  }

  export type AuthsCreateManyInput = {
    id?: number
    username: string
    email: string
    active: boolean
    password: string
  }

  export type AuthsUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AuthsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
  }

  export type EventsCreateInput = {
    id: bigint | number
    event_initial_date?: Date | string | null
    event_end_date?: Date | string | null
    location?: string | null
    city?: string | null
    country?: string | null
    tickets?: TicketsCreateNestedManyWithoutEventsInput
  }

  export type EventsUncheckedCreateInput = {
    id: bigint | number
    event_initial_date?: Date | string | null
    event_end_date?: Date | string | null
    location?: string | null
    city?: string | null
    country?: string | null
    tickets?: TicketsUncheckedCreateNestedManyWithoutEventsInput
  }

  export type EventsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    event_initial_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    event_end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tickets?: TicketsUpdateManyWithoutEventsNestedInput
  }

  export type EventsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    event_initial_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    event_end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    tickets?: TicketsUncheckedUpdateManyWithoutEventsNestedInput
  }

  export type EventsCreateManyInput = {
    id: bigint | number
    event_initial_date?: Date | string | null
    event_end_date?: Date | string | null
    location?: string | null
    city?: string | null
    country?: string | null
  }

  export type EventsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    event_initial_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    event_end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    event_initial_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    event_end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolesCreateInput = {
    id?: number
    roleName: $Enums.RoleNames
    auth_roles?: Auth_rolesCreateNestedManyWithoutRolesInput
  }

  export type RolesUncheckedCreateInput = {
    id?: number
    roleName: $Enums.RoleNames
    auth_roles?: Auth_rolesUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RolesUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleName?: EnumRoleNamesFieldUpdateOperationsInput | $Enums.RoleNames
    auth_roles?: Auth_rolesUpdateManyWithoutRolesNestedInput
  }

  export type RolesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleName?: EnumRoleNamesFieldUpdateOperationsInput | $Enums.RoleNames
    auth_roles?: Auth_rolesUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type RolesCreateManyInput = {
    id?: number
    roleName: $Enums.RoleNames
  }

  export type RolesUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleName?: EnumRoleNamesFieldUpdateOperationsInput | $Enums.RoleNames
  }

  export type RolesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleName?: EnumRoleNamesFieldUpdateOperationsInput | $Enums.RoleNames
  }

  export type Ticket_typeCreateInput = {
    id: number
    description?: string | null
    acronym?: string | null
    tickets?: TicketsCreateNestedManyWithoutTicket_typeInput
  }

  export type Ticket_typeUncheckedCreateInput = {
    id: number
    description?: string | null
    acronym?: string | null
    tickets?: TicketsUncheckedCreateNestedManyWithoutTicket_typeInput
  }

  export type Ticket_typeUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    acronym?: NullableStringFieldUpdateOperationsInput | string | null
    tickets?: TicketsUpdateManyWithoutTicket_typeNestedInput
  }

  export type Ticket_typeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    acronym?: NullableStringFieldUpdateOperationsInput | string | null
    tickets?: TicketsUncheckedUpdateManyWithoutTicket_typeNestedInput
  }

  export type Ticket_typeCreateManyInput = {
    id: number
    description?: string | null
    acronym?: string | null
  }

  export type Ticket_typeUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    acronym?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Ticket_typeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    acronym?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Ticket_userCreateInput = {
    user_id: number
    purchase_date: Date | string
    quantity?: number | null
    tickets: TicketsCreateNestedOneWithoutTicket_userInput
  }

  export type Ticket_userUncheckedCreateInput = {
    ticket_id: number
    user_id: number
    purchase_date: Date | string
    quantity?: number | null
  }

  export type Ticket_userUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    tickets?: TicketsUpdateOneRequiredWithoutTicket_userNestedInput
  }

  export type Ticket_userUncheckedUpdateInput = {
    ticket_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Ticket_userCreateManyInput = {
    ticket_id: number
    user_id: number
    purchase_date: Date | string
    quantity?: number | null
  }

  export type Ticket_userUpdateManyMutationInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Ticket_userUncheckedUpdateManyInput = {
    ticket_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TicketsCreateInput = {
    id: number
    value?: Decimal | DecimalJsLike | number | string | null
    ticket_user?: Ticket_userCreateNestedManyWithoutTicketsInput
    events?: EventsCreateNestedOneWithoutTicketsInput
    ticket_type?: Ticket_typeCreateNestedOneWithoutTicketsInput
  }

  export type TicketsUncheckedCreateInput = {
    id: number
    value?: Decimal | DecimalJsLike | number | string | null
    event_id?: bigint | number | null
    ticket_type_id?: number | null
    ticket_user?: Ticket_userUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type TicketsUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticket_user?: Ticket_userUpdateManyWithoutTicketsNestedInput
    events?: EventsUpdateOneWithoutTicketsNestedInput
    ticket_type?: Ticket_typeUpdateOneWithoutTicketsNestedInput
  }

  export type TicketsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    event_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ticket_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_user?: Ticket_userUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type TicketsCreateManyInput = {
    id: number
    value?: Decimal | DecimalJsLike | number | string | null
    event_id?: bigint | number | null
    ticket_type_id?: number | null
  }

  export type TicketsUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type TicketsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    event_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ticket_type_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TokensCreateInput = {
    key: string
    auths: AuthsCreateNestedOneWithoutTokensInput
  }

  export type TokensUncheckedCreateInput = {
    id?: number
    key: string
    auth_id: number
  }

  export type TokensUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    auths?: AuthsUpdateOneRequiredWithoutTokensNestedInput
  }

  export type TokensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    auth_id?: IntFieldUpdateOperationsInput | number
  }

  export type TokensCreateManyInput = {
    id?: number
    key: string
    auth_id: number
  }

  export type TokensUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
  }

  export type TokensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    auth_id?: IntFieldUpdateOperationsInput | number
  }

  export type UsersCreateInput = {
    nickName: string
    phone: string
    active: boolean
    bornDate: Date | string
    auths: AuthsCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    nickName: string
    phone: string
    active: boolean
    bornDate: Date | string
    auth_id: number
  }

  export type UsersUpdateInput = {
    nickName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auths?: AuthsUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nickName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auth_id?: IntFieldUpdateOperationsInput | number
  }

  export type UsersCreateManyInput = {
    id?: number
    nickName: string
    phone: string
    active: boolean
    bornDate: Date | string
    auth_id: number
  }

  export type UsersUpdateManyMutationInput = {
    nickName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nickName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
    auth_id?: IntFieldUpdateOperationsInput | number
  }

  export type CountriesCreateInput = {
    country_name?: string | null
    acronym?: string | null
  }

  export type CountriesUncheckedCreateInput = {
    id?: number
    country_name?: string | null
    acronym?: string | null
  }

  export type CountriesUpdateInput = {
    country_name?: NullableStringFieldUpdateOperationsInput | string | null
    acronym?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CountriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    country_name?: NullableStringFieldUpdateOperationsInput | string | null
    acronym?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CountriesCreateManyInput = {
    id?: number
    country_name?: string | null
    acronym?: string | null
  }

  export type CountriesUpdateManyMutationInput = {
    country_name?: NullableStringFieldUpdateOperationsInput | string | null
    acronym?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CountriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    country_name?: NullableStringFieldUpdateOperationsInput | string | null
    acronym?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AuthsRelationFilter = {
    is?: AuthsWhereInput
    isNot?: AuthsWhereInput
  }

  export type RolesRelationFilter = {
    is?: RolesWhereInput
    isNot?: RolesWhereInput
  }

  export type Auth_rolesAuth_idRole_idCompoundUniqueInput = {
    auth_id: number
    role_id: number
  }

  export type Auth_rolesCountOrderByAggregateInput = {
    auth_id?: SortOrder
    role_id?: SortOrder
  }

  export type Auth_rolesAvgOrderByAggregateInput = {
    auth_id?: SortOrder
    role_id?: SortOrder
  }

  export type Auth_rolesMaxOrderByAggregateInput = {
    auth_id?: SortOrder
    role_id?: SortOrder
  }

  export type Auth_rolesMinOrderByAggregateInput = {
    auth_id?: SortOrder
    role_id?: SortOrder
  }

  export type Auth_rolesSumOrderByAggregateInput = {
    auth_id?: SortOrder
    role_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type Auth_rolesListRelationFilter = {
    every?: Auth_rolesWhereInput
    some?: Auth_rolesWhereInput
    none?: Auth_rolesWhereInput
  }

  export type TokensNullableRelationFilter = {
    is?: TokensWhereInput | null
    isNot?: TokensWhereInput | null
  }

  export type UsersNullableRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type Auth_rolesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuthsCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    active?: SortOrder
    password?: SortOrder
  }

  export type AuthsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuthsMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    active?: SortOrder
    password?: SortOrder
  }

  export type AuthsMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    active?: SortOrder
    password?: SortOrder
  }

  export type AuthsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type TicketsListRelationFilter = {
    every?: TicketsWhereInput
    some?: TicketsWhereInput
    none?: TicketsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TicketsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventsCountOrderByAggregateInput = {
    id?: SortOrder
    event_initial_date?: SortOrder
    event_end_date?: SortOrder
    location?: SortOrder
    city?: SortOrder
    country?: SortOrder
  }

  export type EventsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EventsMaxOrderByAggregateInput = {
    id?: SortOrder
    event_initial_date?: SortOrder
    event_end_date?: SortOrder
    location?: SortOrder
    city?: SortOrder
    country?: SortOrder
  }

  export type EventsMinOrderByAggregateInput = {
    id?: SortOrder
    event_initial_date?: SortOrder
    event_end_date?: SortOrder
    location?: SortOrder
    city?: SortOrder
    country?: SortOrder
  }

  export type EventsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleNamesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleNames | EnumRoleNamesFieldRefInput<$PrismaModel>
    in?: $Enums.RoleNames[] | ListEnumRoleNamesFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleNames[] | ListEnumRoleNamesFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleNamesFilter<$PrismaModel> | $Enums.RoleNames
  }

  export type RolesCountOrderByAggregateInput = {
    id?: SortOrder
    roleName?: SortOrder
  }

  export type RolesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolesMaxOrderByAggregateInput = {
    id?: SortOrder
    roleName?: SortOrder
  }

  export type RolesMinOrderByAggregateInput = {
    id?: SortOrder
    roleName?: SortOrder
  }

  export type RolesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumRoleNamesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleNames | EnumRoleNamesFieldRefInput<$PrismaModel>
    in?: $Enums.RoleNames[] | ListEnumRoleNamesFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleNames[] | ListEnumRoleNamesFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleNamesWithAggregatesFilter<$PrismaModel> | $Enums.RoleNames
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleNamesFilter<$PrismaModel>
    _max?: NestedEnumRoleNamesFilter<$PrismaModel>
  }

  export type Ticket_typeCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    acronym?: SortOrder
  }

  export type Ticket_typeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Ticket_typeMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    acronym?: SortOrder
  }

  export type Ticket_typeMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    acronym?: SortOrder
  }

  export type Ticket_typeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TicketsRelationFilter = {
    is?: TicketsWhereInput
    isNot?: TicketsWhereInput
  }

  export type Ticket_userTicket_idUser_idPurchase_dateCompoundUniqueInput = {
    ticket_id: number
    user_id: number
    purchase_date: Date | string
  }

  export type Ticket_userCountOrderByAggregateInput = {
    ticket_id?: SortOrder
    user_id?: SortOrder
    purchase_date?: SortOrder
    quantity?: SortOrder
  }

  export type Ticket_userAvgOrderByAggregateInput = {
    ticket_id?: SortOrder
    user_id?: SortOrder
    quantity?: SortOrder
  }

  export type Ticket_userMaxOrderByAggregateInput = {
    ticket_id?: SortOrder
    user_id?: SortOrder
    purchase_date?: SortOrder
    quantity?: SortOrder
  }

  export type Ticket_userMinOrderByAggregateInput = {
    ticket_id?: SortOrder
    user_id?: SortOrder
    purchase_date?: SortOrder
    quantity?: SortOrder
  }

  export type Ticket_userSumOrderByAggregateInput = {
    ticket_id?: SortOrder
    user_id?: SortOrder
    quantity?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type Ticket_userListRelationFilter = {
    every?: Ticket_userWhereInput
    some?: Ticket_userWhereInput
    none?: Ticket_userWhereInput
  }

  export type EventsNullableRelationFilter = {
    is?: EventsWhereInput | null
    isNot?: EventsWhereInput | null
  }

  export type Ticket_typeNullableRelationFilter = {
    is?: Ticket_typeWhereInput | null
    isNot?: Ticket_typeWhereInput | null
  }

  export type Ticket_userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketsCountOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    event_id?: SortOrder
    ticket_type_id?: SortOrder
  }

  export type TicketsAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    event_id?: SortOrder
    ticket_type_id?: SortOrder
  }

  export type TicketsMaxOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    event_id?: SortOrder
    ticket_type_id?: SortOrder
  }

  export type TicketsMinOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    event_id?: SortOrder
    ticket_type_id?: SortOrder
  }

  export type TicketsSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    event_id?: SortOrder
    ticket_type_id?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type TokensCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    auth_id?: SortOrder
  }

  export type TokensAvgOrderByAggregateInput = {
    id?: SortOrder
    auth_id?: SortOrder
  }

  export type TokensMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    auth_id?: SortOrder
  }

  export type TokensMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    auth_id?: SortOrder
  }

  export type TokensSumOrderByAggregateInput = {
    id?: SortOrder
    auth_id?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    nickName?: SortOrder
    phone?: SortOrder
    active?: SortOrder
    bornDate?: SortOrder
    auth_id?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
    auth_id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    nickName?: SortOrder
    phone?: SortOrder
    active?: SortOrder
    bornDate?: SortOrder
    auth_id?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    nickName?: SortOrder
    phone?: SortOrder
    active?: SortOrder
    bornDate?: SortOrder
    auth_id?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
    auth_id?: SortOrder
  }

  export type CountriesCountOrderByAggregateInput = {
    id?: SortOrder
    country_name?: SortOrder
    acronym?: SortOrder
  }

  export type CountriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CountriesMaxOrderByAggregateInput = {
    id?: SortOrder
    country_name?: SortOrder
    acronym?: SortOrder
  }

  export type CountriesMinOrderByAggregateInput = {
    id?: SortOrder
    country_name?: SortOrder
    acronym?: SortOrder
  }

  export type CountriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuthsCreateNestedOneWithoutAuth_rolesInput = {
    create?: XOR<AuthsCreateWithoutAuth_rolesInput, AuthsUncheckedCreateWithoutAuth_rolesInput>
    connectOrCreate?: AuthsCreateOrConnectWithoutAuth_rolesInput
    connect?: AuthsWhereUniqueInput
  }

  export type RolesCreateNestedOneWithoutAuth_rolesInput = {
    create?: XOR<RolesCreateWithoutAuth_rolesInput, RolesUncheckedCreateWithoutAuth_rolesInput>
    connectOrCreate?: RolesCreateOrConnectWithoutAuth_rolesInput
    connect?: RolesWhereUniqueInput
  }

  export type AuthsUpdateOneRequiredWithoutAuth_rolesNestedInput = {
    create?: XOR<AuthsCreateWithoutAuth_rolesInput, AuthsUncheckedCreateWithoutAuth_rolesInput>
    connectOrCreate?: AuthsCreateOrConnectWithoutAuth_rolesInput
    upsert?: AuthsUpsertWithoutAuth_rolesInput
    connect?: AuthsWhereUniqueInput
    update?: XOR<XOR<AuthsUpdateToOneWithWhereWithoutAuth_rolesInput, AuthsUpdateWithoutAuth_rolesInput>, AuthsUncheckedUpdateWithoutAuth_rolesInput>
  }

  export type RolesUpdateOneRequiredWithoutAuth_rolesNestedInput = {
    create?: XOR<RolesCreateWithoutAuth_rolesInput, RolesUncheckedCreateWithoutAuth_rolesInput>
    connectOrCreate?: RolesCreateOrConnectWithoutAuth_rolesInput
    upsert?: RolesUpsertWithoutAuth_rolesInput
    connect?: RolesWhereUniqueInput
    update?: XOR<XOR<RolesUpdateToOneWithWhereWithoutAuth_rolesInput, RolesUpdateWithoutAuth_rolesInput>, RolesUncheckedUpdateWithoutAuth_rolesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Auth_rolesCreateNestedManyWithoutAuthsInput = {
    create?: XOR<Auth_rolesCreateWithoutAuthsInput, Auth_rolesUncheckedCreateWithoutAuthsInput> | Auth_rolesCreateWithoutAuthsInput[] | Auth_rolesUncheckedCreateWithoutAuthsInput[]
    connectOrCreate?: Auth_rolesCreateOrConnectWithoutAuthsInput | Auth_rolesCreateOrConnectWithoutAuthsInput[]
    createMany?: Auth_rolesCreateManyAuthsInputEnvelope
    connect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
  }

  export type TokensCreateNestedOneWithoutAuthsInput = {
    create?: XOR<TokensCreateWithoutAuthsInput, TokensUncheckedCreateWithoutAuthsInput>
    connectOrCreate?: TokensCreateOrConnectWithoutAuthsInput
    connect?: TokensWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutAuthsInput = {
    create?: XOR<UsersCreateWithoutAuthsInput, UsersUncheckedCreateWithoutAuthsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAuthsInput
    connect?: UsersWhereUniqueInput
  }

  export type Auth_rolesUncheckedCreateNestedManyWithoutAuthsInput = {
    create?: XOR<Auth_rolesCreateWithoutAuthsInput, Auth_rolesUncheckedCreateWithoutAuthsInput> | Auth_rolesCreateWithoutAuthsInput[] | Auth_rolesUncheckedCreateWithoutAuthsInput[]
    connectOrCreate?: Auth_rolesCreateOrConnectWithoutAuthsInput | Auth_rolesCreateOrConnectWithoutAuthsInput[]
    createMany?: Auth_rolesCreateManyAuthsInputEnvelope
    connect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
  }

  export type TokensUncheckedCreateNestedOneWithoutAuthsInput = {
    create?: XOR<TokensCreateWithoutAuthsInput, TokensUncheckedCreateWithoutAuthsInput>
    connectOrCreate?: TokensCreateOrConnectWithoutAuthsInput
    connect?: TokensWhereUniqueInput
  }

  export type UsersUncheckedCreateNestedOneWithoutAuthsInput = {
    create?: XOR<UsersCreateWithoutAuthsInput, UsersUncheckedCreateWithoutAuthsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAuthsInput
    connect?: UsersWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type Auth_rolesUpdateManyWithoutAuthsNestedInput = {
    create?: XOR<Auth_rolesCreateWithoutAuthsInput, Auth_rolesUncheckedCreateWithoutAuthsInput> | Auth_rolesCreateWithoutAuthsInput[] | Auth_rolesUncheckedCreateWithoutAuthsInput[]
    connectOrCreate?: Auth_rolesCreateOrConnectWithoutAuthsInput | Auth_rolesCreateOrConnectWithoutAuthsInput[]
    upsert?: Auth_rolesUpsertWithWhereUniqueWithoutAuthsInput | Auth_rolesUpsertWithWhereUniqueWithoutAuthsInput[]
    createMany?: Auth_rolesCreateManyAuthsInputEnvelope
    set?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    disconnect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    delete?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    connect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    update?: Auth_rolesUpdateWithWhereUniqueWithoutAuthsInput | Auth_rolesUpdateWithWhereUniqueWithoutAuthsInput[]
    updateMany?: Auth_rolesUpdateManyWithWhereWithoutAuthsInput | Auth_rolesUpdateManyWithWhereWithoutAuthsInput[]
    deleteMany?: Auth_rolesScalarWhereInput | Auth_rolesScalarWhereInput[]
  }

  export type TokensUpdateOneWithoutAuthsNestedInput = {
    create?: XOR<TokensCreateWithoutAuthsInput, TokensUncheckedCreateWithoutAuthsInput>
    connectOrCreate?: TokensCreateOrConnectWithoutAuthsInput
    upsert?: TokensUpsertWithoutAuthsInput
    disconnect?: TokensWhereInput | boolean
    delete?: TokensWhereInput | boolean
    connect?: TokensWhereUniqueInput
    update?: XOR<XOR<TokensUpdateToOneWithWhereWithoutAuthsInput, TokensUpdateWithoutAuthsInput>, TokensUncheckedUpdateWithoutAuthsInput>
  }

  export type UsersUpdateOneWithoutAuthsNestedInput = {
    create?: XOR<UsersCreateWithoutAuthsInput, UsersUncheckedCreateWithoutAuthsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAuthsInput
    upsert?: UsersUpsertWithoutAuthsInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutAuthsInput, UsersUpdateWithoutAuthsInput>, UsersUncheckedUpdateWithoutAuthsInput>
  }

  export type Auth_rolesUncheckedUpdateManyWithoutAuthsNestedInput = {
    create?: XOR<Auth_rolesCreateWithoutAuthsInput, Auth_rolesUncheckedCreateWithoutAuthsInput> | Auth_rolesCreateWithoutAuthsInput[] | Auth_rolesUncheckedCreateWithoutAuthsInput[]
    connectOrCreate?: Auth_rolesCreateOrConnectWithoutAuthsInput | Auth_rolesCreateOrConnectWithoutAuthsInput[]
    upsert?: Auth_rolesUpsertWithWhereUniqueWithoutAuthsInput | Auth_rolesUpsertWithWhereUniqueWithoutAuthsInput[]
    createMany?: Auth_rolesCreateManyAuthsInputEnvelope
    set?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    disconnect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    delete?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    connect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    update?: Auth_rolesUpdateWithWhereUniqueWithoutAuthsInput | Auth_rolesUpdateWithWhereUniqueWithoutAuthsInput[]
    updateMany?: Auth_rolesUpdateManyWithWhereWithoutAuthsInput | Auth_rolesUpdateManyWithWhereWithoutAuthsInput[]
    deleteMany?: Auth_rolesScalarWhereInput | Auth_rolesScalarWhereInput[]
  }

  export type TokensUncheckedUpdateOneWithoutAuthsNestedInput = {
    create?: XOR<TokensCreateWithoutAuthsInput, TokensUncheckedCreateWithoutAuthsInput>
    connectOrCreate?: TokensCreateOrConnectWithoutAuthsInput
    upsert?: TokensUpsertWithoutAuthsInput
    disconnect?: TokensWhereInput | boolean
    delete?: TokensWhereInput | boolean
    connect?: TokensWhereUniqueInput
    update?: XOR<XOR<TokensUpdateToOneWithWhereWithoutAuthsInput, TokensUpdateWithoutAuthsInput>, TokensUncheckedUpdateWithoutAuthsInput>
  }

  export type UsersUncheckedUpdateOneWithoutAuthsNestedInput = {
    create?: XOR<UsersCreateWithoutAuthsInput, UsersUncheckedCreateWithoutAuthsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAuthsInput
    upsert?: UsersUpsertWithoutAuthsInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutAuthsInput, UsersUpdateWithoutAuthsInput>, UsersUncheckedUpdateWithoutAuthsInput>
  }

  export type TicketsCreateNestedManyWithoutEventsInput = {
    create?: XOR<TicketsCreateWithoutEventsInput, TicketsUncheckedCreateWithoutEventsInput> | TicketsCreateWithoutEventsInput[] | TicketsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutEventsInput | TicketsCreateOrConnectWithoutEventsInput[]
    createMany?: TicketsCreateManyEventsInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type TicketsUncheckedCreateNestedManyWithoutEventsInput = {
    create?: XOR<TicketsCreateWithoutEventsInput, TicketsUncheckedCreateWithoutEventsInput> | TicketsCreateWithoutEventsInput[] | TicketsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutEventsInput | TicketsCreateOrConnectWithoutEventsInput[]
    createMany?: TicketsCreateManyEventsInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type TicketsUpdateManyWithoutEventsNestedInput = {
    create?: XOR<TicketsCreateWithoutEventsInput, TicketsUncheckedCreateWithoutEventsInput> | TicketsCreateWithoutEventsInput[] | TicketsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutEventsInput | TicketsCreateOrConnectWithoutEventsInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutEventsInput | TicketsUpsertWithWhereUniqueWithoutEventsInput[]
    createMany?: TicketsCreateManyEventsInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutEventsInput | TicketsUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutEventsInput | TicketsUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type TicketsUncheckedUpdateManyWithoutEventsNestedInput = {
    create?: XOR<TicketsCreateWithoutEventsInput, TicketsUncheckedCreateWithoutEventsInput> | TicketsCreateWithoutEventsInput[] | TicketsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutEventsInput | TicketsCreateOrConnectWithoutEventsInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutEventsInput | TicketsUpsertWithWhereUniqueWithoutEventsInput[]
    createMany?: TicketsCreateManyEventsInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutEventsInput | TicketsUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutEventsInput | TicketsUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type Auth_rolesCreateNestedManyWithoutRolesInput = {
    create?: XOR<Auth_rolesCreateWithoutRolesInput, Auth_rolesUncheckedCreateWithoutRolesInput> | Auth_rolesCreateWithoutRolesInput[] | Auth_rolesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: Auth_rolesCreateOrConnectWithoutRolesInput | Auth_rolesCreateOrConnectWithoutRolesInput[]
    createMany?: Auth_rolesCreateManyRolesInputEnvelope
    connect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
  }

  export type Auth_rolesUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<Auth_rolesCreateWithoutRolesInput, Auth_rolesUncheckedCreateWithoutRolesInput> | Auth_rolesCreateWithoutRolesInput[] | Auth_rolesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: Auth_rolesCreateOrConnectWithoutRolesInput | Auth_rolesCreateOrConnectWithoutRolesInput[]
    createMany?: Auth_rolesCreateManyRolesInputEnvelope
    connect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
  }

  export type EnumRoleNamesFieldUpdateOperationsInput = {
    set?: $Enums.RoleNames
  }

  export type Auth_rolesUpdateManyWithoutRolesNestedInput = {
    create?: XOR<Auth_rolesCreateWithoutRolesInput, Auth_rolesUncheckedCreateWithoutRolesInput> | Auth_rolesCreateWithoutRolesInput[] | Auth_rolesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: Auth_rolesCreateOrConnectWithoutRolesInput | Auth_rolesCreateOrConnectWithoutRolesInput[]
    upsert?: Auth_rolesUpsertWithWhereUniqueWithoutRolesInput | Auth_rolesUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: Auth_rolesCreateManyRolesInputEnvelope
    set?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    disconnect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    delete?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    connect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    update?: Auth_rolesUpdateWithWhereUniqueWithoutRolesInput | Auth_rolesUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: Auth_rolesUpdateManyWithWhereWithoutRolesInput | Auth_rolesUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: Auth_rolesScalarWhereInput | Auth_rolesScalarWhereInput[]
  }

  export type Auth_rolesUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<Auth_rolesCreateWithoutRolesInput, Auth_rolesUncheckedCreateWithoutRolesInput> | Auth_rolesCreateWithoutRolesInput[] | Auth_rolesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: Auth_rolesCreateOrConnectWithoutRolesInput | Auth_rolesCreateOrConnectWithoutRolesInput[]
    upsert?: Auth_rolesUpsertWithWhereUniqueWithoutRolesInput | Auth_rolesUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: Auth_rolesCreateManyRolesInputEnvelope
    set?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    disconnect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    delete?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    connect?: Auth_rolesWhereUniqueInput | Auth_rolesWhereUniqueInput[]
    update?: Auth_rolesUpdateWithWhereUniqueWithoutRolesInput | Auth_rolesUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: Auth_rolesUpdateManyWithWhereWithoutRolesInput | Auth_rolesUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: Auth_rolesScalarWhereInput | Auth_rolesScalarWhereInput[]
  }

  export type TicketsCreateNestedManyWithoutTicket_typeInput = {
    create?: XOR<TicketsCreateWithoutTicket_typeInput, TicketsUncheckedCreateWithoutTicket_typeInput> | TicketsCreateWithoutTicket_typeInput[] | TicketsUncheckedCreateWithoutTicket_typeInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutTicket_typeInput | TicketsCreateOrConnectWithoutTicket_typeInput[]
    createMany?: TicketsCreateManyTicket_typeInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type TicketsUncheckedCreateNestedManyWithoutTicket_typeInput = {
    create?: XOR<TicketsCreateWithoutTicket_typeInput, TicketsUncheckedCreateWithoutTicket_typeInput> | TicketsCreateWithoutTicket_typeInput[] | TicketsUncheckedCreateWithoutTicket_typeInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutTicket_typeInput | TicketsCreateOrConnectWithoutTicket_typeInput[]
    createMany?: TicketsCreateManyTicket_typeInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type TicketsUpdateManyWithoutTicket_typeNestedInput = {
    create?: XOR<TicketsCreateWithoutTicket_typeInput, TicketsUncheckedCreateWithoutTicket_typeInput> | TicketsCreateWithoutTicket_typeInput[] | TicketsUncheckedCreateWithoutTicket_typeInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutTicket_typeInput | TicketsCreateOrConnectWithoutTicket_typeInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutTicket_typeInput | TicketsUpsertWithWhereUniqueWithoutTicket_typeInput[]
    createMany?: TicketsCreateManyTicket_typeInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutTicket_typeInput | TicketsUpdateWithWhereUniqueWithoutTicket_typeInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutTicket_typeInput | TicketsUpdateManyWithWhereWithoutTicket_typeInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type TicketsUncheckedUpdateManyWithoutTicket_typeNestedInput = {
    create?: XOR<TicketsCreateWithoutTicket_typeInput, TicketsUncheckedCreateWithoutTicket_typeInput> | TicketsCreateWithoutTicket_typeInput[] | TicketsUncheckedCreateWithoutTicket_typeInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutTicket_typeInput | TicketsCreateOrConnectWithoutTicket_typeInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutTicket_typeInput | TicketsUpsertWithWhereUniqueWithoutTicket_typeInput[]
    createMany?: TicketsCreateManyTicket_typeInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutTicket_typeInput | TicketsUpdateWithWhereUniqueWithoutTicket_typeInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutTicket_typeInput | TicketsUpdateManyWithWhereWithoutTicket_typeInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type TicketsCreateNestedOneWithoutTicket_userInput = {
    create?: XOR<TicketsCreateWithoutTicket_userInput, TicketsUncheckedCreateWithoutTicket_userInput>
    connectOrCreate?: TicketsCreateOrConnectWithoutTicket_userInput
    connect?: TicketsWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TicketsUpdateOneRequiredWithoutTicket_userNestedInput = {
    create?: XOR<TicketsCreateWithoutTicket_userInput, TicketsUncheckedCreateWithoutTicket_userInput>
    connectOrCreate?: TicketsCreateOrConnectWithoutTicket_userInput
    upsert?: TicketsUpsertWithoutTicket_userInput
    connect?: TicketsWhereUniqueInput
    update?: XOR<XOR<TicketsUpdateToOneWithWhereWithoutTicket_userInput, TicketsUpdateWithoutTicket_userInput>, TicketsUncheckedUpdateWithoutTicket_userInput>
  }

  export type Ticket_userCreateNestedManyWithoutTicketsInput = {
    create?: XOR<Ticket_userCreateWithoutTicketsInput, Ticket_userUncheckedCreateWithoutTicketsInput> | Ticket_userCreateWithoutTicketsInput[] | Ticket_userUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: Ticket_userCreateOrConnectWithoutTicketsInput | Ticket_userCreateOrConnectWithoutTicketsInput[]
    createMany?: Ticket_userCreateManyTicketsInputEnvelope
    connect?: Ticket_userWhereUniqueInput | Ticket_userWhereUniqueInput[]
  }

  export type EventsCreateNestedOneWithoutTicketsInput = {
    create?: XOR<EventsCreateWithoutTicketsInput, EventsUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: EventsCreateOrConnectWithoutTicketsInput
    connect?: EventsWhereUniqueInput
  }

  export type Ticket_typeCreateNestedOneWithoutTicketsInput = {
    create?: XOR<Ticket_typeCreateWithoutTicketsInput, Ticket_typeUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: Ticket_typeCreateOrConnectWithoutTicketsInput
    connect?: Ticket_typeWhereUniqueInput
  }

  export type Ticket_userUncheckedCreateNestedManyWithoutTicketsInput = {
    create?: XOR<Ticket_userCreateWithoutTicketsInput, Ticket_userUncheckedCreateWithoutTicketsInput> | Ticket_userCreateWithoutTicketsInput[] | Ticket_userUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: Ticket_userCreateOrConnectWithoutTicketsInput | Ticket_userCreateOrConnectWithoutTicketsInput[]
    createMany?: Ticket_userCreateManyTicketsInputEnvelope
    connect?: Ticket_userWhereUniqueInput | Ticket_userWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type Ticket_userUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<Ticket_userCreateWithoutTicketsInput, Ticket_userUncheckedCreateWithoutTicketsInput> | Ticket_userCreateWithoutTicketsInput[] | Ticket_userUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: Ticket_userCreateOrConnectWithoutTicketsInput | Ticket_userCreateOrConnectWithoutTicketsInput[]
    upsert?: Ticket_userUpsertWithWhereUniqueWithoutTicketsInput | Ticket_userUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: Ticket_userCreateManyTicketsInputEnvelope
    set?: Ticket_userWhereUniqueInput | Ticket_userWhereUniqueInput[]
    disconnect?: Ticket_userWhereUniqueInput | Ticket_userWhereUniqueInput[]
    delete?: Ticket_userWhereUniqueInput | Ticket_userWhereUniqueInput[]
    connect?: Ticket_userWhereUniqueInput | Ticket_userWhereUniqueInput[]
    update?: Ticket_userUpdateWithWhereUniqueWithoutTicketsInput | Ticket_userUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: Ticket_userUpdateManyWithWhereWithoutTicketsInput | Ticket_userUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: Ticket_userScalarWhereInput | Ticket_userScalarWhereInput[]
  }

  export type EventsUpdateOneWithoutTicketsNestedInput = {
    create?: XOR<EventsCreateWithoutTicketsInput, EventsUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: EventsCreateOrConnectWithoutTicketsInput
    upsert?: EventsUpsertWithoutTicketsInput
    disconnect?: EventsWhereInput | boolean
    delete?: EventsWhereInput | boolean
    connect?: EventsWhereUniqueInput
    update?: XOR<XOR<EventsUpdateToOneWithWhereWithoutTicketsInput, EventsUpdateWithoutTicketsInput>, EventsUncheckedUpdateWithoutTicketsInput>
  }

  export type Ticket_typeUpdateOneWithoutTicketsNestedInput = {
    create?: XOR<Ticket_typeCreateWithoutTicketsInput, Ticket_typeUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: Ticket_typeCreateOrConnectWithoutTicketsInput
    upsert?: Ticket_typeUpsertWithoutTicketsInput
    disconnect?: Ticket_typeWhereInput | boolean
    delete?: Ticket_typeWhereInput | boolean
    connect?: Ticket_typeWhereUniqueInput
    update?: XOR<XOR<Ticket_typeUpdateToOneWithWhereWithoutTicketsInput, Ticket_typeUpdateWithoutTicketsInput>, Ticket_typeUncheckedUpdateWithoutTicketsInput>
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type Ticket_userUncheckedUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<Ticket_userCreateWithoutTicketsInput, Ticket_userUncheckedCreateWithoutTicketsInput> | Ticket_userCreateWithoutTicketsInput[] | Ticket_userUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: Ticket_userCreateOrConnectWithoutTicketsInput | Ticket_userCreateOrConnectWithoutTicketsInput[]
    upsert?: Ticket_userUpsertWithWhereUniqueWithoutTicketsInput | Ticket_userUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: Ticket_userCreateManyTicketsInputEnvelope
    set?: Ticket_userWhereUniqueInput | Ticket_userWhereUniqueInput[]
    disconnect?: Ticket_userWhereUniqueInput | Ticket_userWhereUniqueInput[]
    delete?: Ticket_userWhereUniqueInput | Ticket_userWhereUniqueInput[]
    connect?: Ticket_userWhereUniqueInput | Ticket_userWhereUniqueInput[]
    update?: Ticket_userUpdateWithWhereUniqueWithoutTicketsInput | Ticket_userUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: Ticket_userUpdateManyWithWhereWithoutTicketsInput | Ticket_userUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: Ticket_userScalarWhereInput | Ticket_userScalarWhereInput[]
  }

  export type AuthsCreateNestedOneWithoutTokensInput = {
    create?: XOR<AuthsCreateWithoutTokensInput, AuthsUncheckedCreateWithoutTokensInput>
    connectOrCreate?: AuthsCreateOrConnectWithoutTokensInput
    connect?: AuthsWhereUniqueInput
  }

  export type AuthsUpdateOneRequiredWithoutTokensNestedInput = {
    create?: XOR<AuthsCreateWithoutTokensInput, AuthsUncheckedCreateWithoutTokensInput>
    connectOrCreate?: AuthsCreateOrConnectWithoutTokensInput
    upsert?: AuthsUpsertWithoutTokensInput
    connect?: AuthsWhereUniqueInput
    update?: XOR<XOR<AuthsUpdateToOneWithWhereWithoutTokensInput, AuthsUpdateWithoutTokensInput>, AuthsUncheckedUpdateWithoutTokensInput>
  }

  export type AuthsCreateNestedOneWithoutUsersInput = {
    create?: XOR<AuthsCreateWithoutUsersInput, AuthsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AuthsCreateOrConnectWithoutUsersInput
    connect?: AuthsWhereUniqueInput
  }

  export type AuthsUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<AuthsCreateWithoutUsersInput, AuthsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AuthsCreateOrConnectWithoutUsersInput
    upsert?: AuthsUpsertWithoutUsersInput
    connect?: AuthsWhereUniqueInput
    update?: XOR<XOR<AuthsUpdateToOneWithWhereWithoutUsersInput, AuthsUpdateWithoutUsersInput>, AuthsUncheckedUpdateWithoutUsersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleNamesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleNames | EnumRoleNamesFieldRefInput<$PrismaModel>
    in?: $Enums.RoleNames[] | ListEnumRoleNamesFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleNames[] | ListEnumRoleNamesFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleNamesFilter<$PrismaModel> | $Enums.RoleNames
  }

  export type NestedEnumRoleNamesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleNames | EnumRoleNamesFieldRefInput<$PrismaModel>
    in?: $Enums.RoleNames[] | ListEnumRoleNamesFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleNames[] | ListEnumRoleNamesFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleNamesWithAggregatesFilter<$PrismaModel> | $Enums.RoleNames
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleNamesFilter<$PrismaModel>
    _max?: NestedEnumRoleNamesFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type AuthsCreateWithoutAuth_rolesInput = {
    username: string
    email: string
    active: boolean
    password: string
    tokens?: TokensCreateNestedOneWithoutAuthsInput
    users?: UsersCreateNestedOneWithoutAuthsInput
  }

  export type AuthsUncheckedCreateWithoutAuth_rolesInput = {
    id?: number
    username: string
    email: string
    active: boolean
    password: string
    tokens?: TokensUncheckedCreateNestedOneWithoutAuthsInput
    users?: UsersUncheckedCreateNestedOneWithoutAuthsInput
  }

  export type AuthsCreateOrConnectWithoutAuth_rolesInput = {
    where: AuthsWhereUniqueInput
    create: XOR<AuthsCreateWithoutAuth_rolesInput, AuthsUncheckedCreateWithoutAuth_rolesInput>
  }

  export type RolesCreateWithoutAuth_rolesInput = {
    id?: number
    roleName: $Enums.RoleNames
  }

  export type RolesUncheckedCreateWithoutAuth_rolesInput = {
    id?: number
    roleName: $Enums.RoleNames
  }

  export type RolesCreateOrConnectWithoutAuth_rolesInput = {
    where: RolesWhereUniqueInput
    create: XOR<RolesCreateWithoutAuth_rolesInput, RolesUncheckedCreateWithoutAuth_rolesInput>
  }

  export type AuthsUpsertWithoutAuth_rolesInput = {
    update: XOR<AuthsUpdateWithoutAuth_rolesInput, AuthsUncheckedUpdateWithoutAuth_rolesInput>
    create: XOR<AuthsCreateWithoutAuth_rolesInput, AuthsUncheckedCreateWithoutAuth_rolesInput>
    where?: AuthsWhereInput
  }

  export type AuthsUpdateToOneWithWhereWithoutAuth_rolesInput = {
    where?: AuthsWhereInput
    data: XOR<AuthsUpdateWithoutAuth_rolesInput, AuthsUncheckedUpdateWithoutAuth_rolesInput>
  }

  export type AuthsUpdateWithoutAuth_rolesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    tokens?: TokensUpdateOneWithoutAuthsNestedInput
    users?: UsersUpdateOneWithoutAuthsNestedInput
  }

  export type AuthsUncheckedUpdateWithoutAuth_rolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    tokens?: TokensUncheckedUpdateOneWithoutAuthsNestedInput
    users?: UsersUncheckedUpdateOneWithoutAuthsNestedInput
  }

  export type RolesUpsertWithoutAuth_rolesInput = {
    update: XOR<RolesUpdateWithoutAuth_rolesInput, RolesUncheckedUpdateWithoutAuth_rolesInput>
    create: XOR<RolesCreateWithoutAuth_rolesInput, RolesUncheckedCreateWithoutAuth_rolesInput>
    where?: RolesWhereInput
  }

  export type RolesUpdateToOneWithWhereWithoutAuth_rolesInput = {
    where?: RolesWhereInput
    data: XOR<RolesUpdateWithoutAuth_rolesInput, RolesUncheckedUpdateWithoutAuth_rolesInput>
  }

  export type RolesUpdateWithoutAuth_rolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleName?: EnumRoleNamesFieldUpdateOperationsInput | $Enums.RoleNames
  }

  export type RolesUncheckedUpdateWithoutAuth_rolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleName?: EnumRoleNamesFieldUpdateOperationsInput | $Enums.RoleNames
  }

  export type Auth_rolesCreateWithoutAuthsInput = {
    roles: RolesCreateNestedOneWithoutAuth_rolesInput
  }

  export type Auth_rolesUncheckedCreateWithoutAuthsInput = {
    role_id: number
  }

  export type Auth_rolesCreateOrConnectWithoutAuthsInput = {
    where: Auth_rolesWhereUniqueInput
    create: XOR<Auth_rolesCreateWithoutAuthsInput, Auth_rolesUncheckedCreateWithoutAuthsInput>
  }

  export type Auth_rolesCreateManyAuthsInputEnvelope = {
    data: Auth_rolesCreateManyAuthsInput | Auth_rolesCreateManyAuthsInput[]
    skipDuplicates?: boolean
  }

  export type TokensCreateWithoutAuthsInput = {
    key: string
  }

  export type TokensUncheckedCreateWithoutAuthsInput = {
    id?: number
    key: string
  }

  export type TokensCreateOrConnectWithoutAuthsInput = {
    where: TokensWhereUniqueInput
    create: XOR<TokensCreateWithoutAuthsInput, TokensUncheckedCreateWithoutAuthsInput>
  }

  export type UsersCreateWithoutAuthsInput = {
    nickName: string
    phone: string
    active: boolean
    bornDate: Date | string
  }

  export type UsersUncheckedCreateWithoutAuthsInput = {
    id?: number
    nickName: string
    phone: string
    active: boolean
    bornDate: Date | string
  }

  export type UsersCreateOrConnectWithoutAuthsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAuthsInput, UsersUncheckedCreateWithoutAuthsInput>
  }

  export type Auth_rolesUpsertWithWhereUniqueWithoutAuthsInput = {
    where: Auth_rolesWhereUniqueInput
    update: XOR<Auth_rolesUpdateWithoutAuthsInput, Auth_rolesUncheckedUpdateWithoutAuthsInput>
    create: XOR<Auth_rolesCreateWithoutAuthsInput, Auth_rolesUncheckedCreateWithoutAuthsInput>
  }

  export type Auth_rolesUpdateWithWhereUniqueWithoutAuthsInput = {
    where: Auth_rolesWhereUniqueInput
    data: XOR<Auth_rolesUpdateWithoutAuthsInput, Auth_rolesUncheckedUpdateWithoutAuthsInput>
  }

  export type Auth_rolesUpdateManyWithWhereWithoutAuthsInput = {
    where: Auth_rolesScalarWhereInput
    data: XOR<Auth_rolesUpdateManyMutationInput, Auth_rolesUncheckedUpdateManyWithoutAuthsInput>
  }

  export type Auth_rolesScalarWhereInput = {
    AND?: Auth_rolesScalarWhereInput | Auth_rolesScalarWhereInput[]
    OR?: Auth_rolesScalarWhereInput[]
    NOT?: Auth_rolesScalarWhereInput | Auth_rolesScalarWhereInput[]
    auth_id?: IntFilter<"Auth_roles"> | number
    role_id?: IntFilter<"Auth_roles"> | number
  }

  export type TokensUpsertWithoutAuthsInput = {
    update: XOR<TokensUpdateWithoutAuthsInput, TokensUncheckedUpdateWithoutAuthsInput>
    create: XOR<TokensCreateWithoutAuthsInput, TokensUncheckedCreateWithoutAuthsInput>
    where?: TokensWhereInput
  }

  export type TokensUpdateToOneWithWhereWithoutAuthsInput = {
    where?: TokensWhereInput
    data: XOR<TokensUpdateWithoutAuthsInput, TokensUncheckedUpdateWithoutAuthsInput>
  }

  export type TokensUpdateWithoutAuthsInput = {
    key?: StringFieldUpdateOperationsInput | string
  }

  export type TokensUncheckedUpdateWithoutAuthsInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUpsertWithoutAuthsInput = {
    update: XOR<UsersUpdateWithoutAuthsInput, UsersUncheckedUpdateWithoutAuthsInput>
    create: XOR<UsersCreateWithoutAuthsInput, UsersUncheckedCreateWithoutAuthsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutAuthsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutAuthsInput, UsersUncheckedUpdateWithoutAuthsInput>
  }

  export type UsersUpdateWithoutAuthsInput = {
    nickName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateWithoutAuthsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nickName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    bornDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketsCreateWithoutEventsInput = {
    id: number
    value?: Decimal | DecimalJsLike | number | string | null
    ticket_user?: Ticket_userCreateNestedManyWithoutTicketsInput
    ticket_type?: Ticket_typeCreateNestedOneWithoutTicketsInput
  }

  export type TicketsUncheckedCreateWithoutEventsInput = {
    id: number
    value?: Decimal | DecimalJsLike | number | string | null
    ticket_type_id?: number | null
    ticket_user?: Ticket_userUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type TicketsCreateOrConnectWithoutEventsInput = {
    where: TicketsWhereUniqueInput
    create: XOR<TicketsCreateWithoutEventsInput, TicketsUncheckedCreateWithoutEventsInput>
  }

  export type TicketsCreateManyEventsInputEnvelope = {
    data: TicketsCreateManyEventsInput | TicketsCreateManyEventsInput[]
    skipDuplicates?: boolean
  }

  export type TicketsUpsertWithWhereUniqueWithoutEventsInput = {
    where: TicketsWhereUniqueInput
    update: XOR<TicketsUpdateWithoutEventsInput, TicketsUncheckedUpdateWithoutEventsInput>
    create: XOR<TicketsCreateWithoutEventsInput, TicketsUncheckedCreateWithoutEventsInput>
  }

  export type TicketsUpdateWithWhereUniqueWithoutEventsInput = {
    where: TicketsWhereUniqueInput
    data: XOR<TicketsUpdateWithoutEventsInput, TicketsUncheckedUpdateWithoutEventsInput>
  }

  export type TicketsUpdateManyWithWhereWithoutEventsInput = {
    where: TicketsScalarWhereInput
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyWithoutEventsInput>
  }

  export type TicketsScalarWhereInput = {
    AND?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
    OR?: TicketsScalarWhereInput[]
    NOT?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
    id?: IntFilter<"Tickets"> | number
    value?: DecimalNullableFilter<"Tickets"> | Decimal | DecimalJsLike | number | string | null
    event_id?: BigIntNullableFilter<"Tickets"> | bigint | number | null
    ticket_type_id?: IntNullableFilter<"Tickets"> | number | null
  }

  export type Auth_rolesCreateWithoutRolesInput = {
    auths: AuthsCreateNestedOneWithoutAuth_rolesInput
  }

  export type Auth_rolesUncheckedCreateWithoutRolesInput = {
    auth_id: number
  }

  export type Auth_rolesCreateOrConnectWithoutRolesInput = {
    where: Auth_rolesWhereUniqueInput
    create: XOR<Auth_rolesCreateWithoutRolesInput, Auth_rolesUncheckedCreateWithoutRolesInput>
  }

  export type Auth_rolesCreateManyRolesInputEnvelope = {
    data: Auth_rolesCreateManyRolesInput | Auth_rolesCreateManyRolesInput[]
    skipDuplicates?: boolean
  }

  export type Auth_rolesUpsertWithWhereUniqueWithoutRolesInput = {
    where: Auth_rolesWhereUniqueInput
    update: XOR<Auth_rolesUpdateWithoutRolesInput, Auth_rolesUncheckedUpdateWithoutRolesInput>
    create: XOR<Auth_rolesCreateWithoutRolesInput, Auth_rolesUncheckedCreateWithoutRolesInput>
  }

  export type Auth_rolesUpdateWithWhereUniqueWithoutRolesInput = {
    where: Auth_rolesWhereUniqueInput
    data: XOR<Auth_rolesUpdateWithoutRolesInput, Auth_rolesUncheckedUpdateWithoutRolesInput>
  }

  export type Auth_rolesUpdateManyWithWhereWithoutRolesInput = {
    where: Auth_rolesScalarWhereInput
    data: XOR<Auth_rolesUpdateManyMutationInput, Auth_rolesUncheckedUpdateManyWithoutRolesInput>
  }

  export type TicketsCreateWithoutTicket_typeInput = {
    id: number
    value?: Decimal | DecimalJsLike | number | string | null
    ticket_user?: Ticket_userCreateNestedManyWithoutTicketsInput
    events?: EventsCreateNestedOneWithoutTicketsInput
  }

  export type TicketsUncheckedCreateWithoutTicket_typeInput = {
    id: number
    value?: Decimal | DecimalJsLike | number | string | null
    event_id?: bigint | number | null
    ticket_user?: Ticket_userUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type TicketsCreateOrConnectWithoutTicket_typeInput = {
    where: TicketsWhereUniqueInput
    create: XOR<TicketsCreateWithoutTicket_typeInput, TicketsUncheckedCreateWithoutTicket_typeInput>
  }

  export type TicketsCreateManyTicket_typeInputEnvelope = {
    data: TicketsCreateManyTicket_typeInput | TicketsCreateManyTicket_typeInput[]
    skipDuplicates?: boolean
  }

  export type TicketsUpsertWithWhereUniqueWithoutTicket_typeInput = {
    where: TicketsWhereUniqueInput
    update: XOR<TicketsUpdateWithoutTicket_typeInput, TicketsUncheckedUpdateWithoutTicket_typeInput>
    create: XOR<TicketsCreateWithoutTicket_typeInput, TicketsUncheckedCreateWithoutTicket_typeInput>
  }

  export type TicketsUpdateWithWhereUniqueWithoutTicket_typeInput = {
    where: TicketsWhereUniqueInput
    data: XOR<TicketsUpdateWithoutTicket_typeInput, TicketsUncheckedUpdateWithoutTicket_typeInput>
  }

  export type TicketsUpdateManyWithWhereWithoutTicket_typeInput = {
    where: TicketsScalarWhereInput
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyWithoutTicket_typeInput>
  }

  export type TicketsCreateWithoutTicket_userInput = {
    id: number
    value?: Decimal | DecimalJsLike | number | string | null
    events?: EventsCreateNestedOneWithoutTicketsInput
    ticket_type?: Ticket_typeCreateNestedOneWithoutTicketsInput
  }

  export type TicketsUncheckedCreateWithoutTicket_userInput = {
    id: number
    value?: Decimal | DecimalJsLike | number | string | null
    event_id?: bigint | number | null
    ticket_type_id?: number | null
  }

  export type TicketsCreateOrConnectWithoutTicket_userInput = {
    where: TicketsWhereUniqueInput
    create: XOR<TicketsCreateWithoutTicket_userInput, TicketsUncheckedCreateWithoutTicket_userInput>
  }

  export type TicketsUpsertWithoutTicket_userInput = {
    update: XOR<TicketsUpdateWithoutTicket_userInput, TicketsUncheckedUpdateWithoutTicket_userInput>
    create: XOR<TicketsCreateWithoutTicket_userInput, TicketsUncheckedCreateWithoutTicket_userInput>
    where?: TicketsWhereInput
  }

  export type TicketsUpdateToOneWithWhereWithoutTicket_userInput = {
    where?: TicketsWhereInput
    data: XOR<TicketsUpdateWithoutTicket_userInput, TicketsUncheckedUpdateWithoutTicket_userInput>
  }

  export type TicketsUpdateWithoutTicket_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    events?: EventsUpdateOneWithoutTicketsNestedInput
    ticket_type?: Ticket_typeUpdateOneWithoutTicketsNestedInput
  }

  export type TicketsUncheckedUpdateWithoutTicket_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    event_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ticket_type_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Ticket_userCreateWithoutTicketsInput = {
    user_id: number
    purchase_date: Date | string
    quantity?: number | null
  }

  export type Ticket_userUncheckedCreateWithoutTicketsInput = {
    user_id: number
    purchase_date: Date | string
    quantity?: number | null
  }

  export type Ticket_userCreateOrConnectWithoutTicketsInput = {
    where: Ticket_userWhereUniqueInput
    create: XOR<Ticket_userCreateWithoutTicketsInput, Ticket_userUncheckedCreateWithoutTicketsInput>
  }

  export type Ticket_userCreateManyTicketsInputEnvelope = {
    data: Ticket_userCreateManyTicketsInput | Ticket_userCreateManyTicketsInput[]
    skipDuplicates?: boolean
  }

  export type EventsCreateWithoutTicketsInput = {
    id: bigint | number
    event_initial_date?: Date | string | null
    event_end_date?: Date | string | null
    location?: string | null
    city?: string | null
    country?: string | null
  }

  export type EventsUncheckedCreateWithoutTicketsInput = {
    id: bigint | number
    event_initial_date?: Date | string | null
    event_end_date?: Date | string | null
    location?: string | null
    city?: string | null
    country?: string | null
  }

  export type EventsCreateOrConnectWithoutTicketsInput = {
    where: EventsWhereUniqueInput
    create: XOR<EventsCreateWithoutTicketsInput, EventsUncheckedCreateWithoutTicketsInput>
  }

  export type Ticket_typeCreateWithoutTicketsInput = {
    id: number
    description?: string | null
    acronym?: string | null
  }

  export type Ticket_typeUncheckedCreateWithoutTicketsInput = {
    id: number
    description?: string | null
    acronym?: string | null
  }

  export type Ticket_typeCreateOrConnectWithoutTicketsInput = {
    where: Ticket_typeWhereUniqueInput
    create: XOR<Ticket_typeCreateWithoutTicketsInput, Ticket_typeUncheckedCreateWithoutTicketsInput>
  }

  export type Ticket_userUpsertWithWhereUniqueWithoutTicketsInput = {
    where: Ticket_userWhereUniqueInput
    update: XOR<Ticket_userUpdateWithoutTicketsInput, Ticket_userUncheckedUpdateWithoutTicketsInput>
    create: XOR<Ticket_userCreateWithoutTicketsInput, Ticket_userUncheckedCreateWithoutTicketsInput>
  }

  export type Ticket_userUpdateWithWhereUniqueWithoutTicketsInput = {
    where: Ticket_userWhereUniqueInput
    data: XOR<Ticket_userUpdateWithoutTicketsInput, Ticket_userUncheckedUpdateWithoutTicketsInput>
  }

  export type Ticket_userUpdateManyWithWhereWithoutTicketsInput = {
    where: Ticket_userScalarWhereInput
    data: XOR<Ticket_userUpdateManyMutationInput, Ticket_userUncheckedUpdateManyWithoutTicketsInput>
  }

  export type Ticket_userScalarWhereInput = {
    AND?: Ticket_userScalarWhereInput | Ticket_userScalarWhereInput[]
    OR?: Ticket_userScalarWhereInput[]
    NOT?: Ticket_userScalarWhereInput | Ticket_userScalarWhereInput[]
    ticket_id?: IntFilter<"Ticket_user"> | number
    user_id?: IntFilter<"Ticket_user"> | number
    purchase_date?: DateTimeFilter<"Ticket_user"> | Date | string
    quantity?: IntNullableFilter<"Ticket_user"> | number | null
  }

  export type EventsUpsertWithoutTicketsInput = {
    update: XOR<EventsUpdateWithoutTicketsInput, EventsUncheckedUpdateWithoutTicketsInput>
    create: XOR<EventsCreateWithoutTicketsInput, EventsUncheckedCreateWithoutTicketsInput>
    where?: EventsWhereInput
  }

  export type EventsUpdateToOneWithWhereWithoutTicketsInput = {
    where?: EventsWhereInput
    data: XOR<EventsUpdateWithoutTicketsInput, EventsUncheckedUpdateWithoutTicketsInput>
  }

  export type EventsUpdateWithoutTicketsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    event_initial_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    event_end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventsUncheckedUpdateWithoutTicketsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    event_initial_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    event_end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Ticket_typeUpsertWithoutTicketsInput = {
    update: XOR<Ticket_typeUpdateWithoutTicketsInput, Ticket_typeUncheckedUpdateWithoutTicketsInput>
    create: XOR<Ticket_typeCreateWithoutTicketsInput, Ticket_typeUncheckedCreateWithoutTicketsInput>
    where?: Ticket_typeWhereInput
  }

  export type Ticket_typeUpdateToOneWithWhereWithoutTicketsInput = {
    where?: Ticket_typeWhereInput
    data: XOR<Ticket_typeUpdateWithoutTicketsInput, Ticket_typeUncheckedUpdateWithoutTicketsInput>
  }

  export type Ticket_typeUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    acronym?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Ticket_typeUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    acronym?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthsCreateWithoutTokensInput = {
    username: string
    email: string
    active: boolean
    password: string
    auth_roles?: Auth_rolesCreateNestedManyWithoutAuthsInput
    users?: UsersCreateNestedOneWithoutAuthsInput
  }

  export type AuthsUncheckedCreateWithoutTokensInput = {
    id?: number
    username: string
    email: string
    active: boolean
    password: string
    auth_roles?: Auth_rolesUncheckedCreateNestedManyWithoutAuthsInput
    users?: UsersUncheckedCreateNestedOneWithoutAuthsInput
  }

  export type AuthsCreateOrConnectWithoutTokensInput = {
    where: AuthsWhereUniqueInput
    create: XOR<AuthsCreateWithoutTokensInput, AuthsUncheckedCreateWithoutTokensInput>
  }

  export type AuthsUpsertWithoutTokensInput = {
    update: XOR<AuthsUpdateWithoutTokensInput, AuthsUncheckedUpdateWithoutTokensInput>
    create: XOR<AuthsCreateWithoutTokensInput, AuthsUncheckedCreateWithoutTokensInput>
    where?: AuthsWhereInput
  }

  export type AuthsUpdateToOneWithWhereWithoutTokensInput = {
    where?: AuthsWhereInput
    data: XOR<AuthsUpdateWithoutTokensInput, AuthsUncheckedUpdateWithoutTokensInput>
  }

  export type AuthsUpdateWithoutTokensInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    auth_roles?: Auth_rolesUpdateManyWithoutAuthsNestedInput
    users?: UsersUpdateOneWithoutAuthsNestedInput
  }

  export type AuthsUncheckedUpdateWithoutTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    auth_roles?: Auth_rolesUncheckedUpdateManyWithoutAuthsNestedInput
    users?: UsersUncheckedUpdateOneWithoutAuthsNestedInput
  }

  export type AuthsCreateWithoutUsersInput = {
    username: string
    email: string
    active: boolean
    password: string
    auth_roles?: Auth_rolesCreateNestedManyWithoutAuthsInput
    tokens?: TokensCreateNestedOneWithoutAuthsInput
  }

  export type AuthsUncheckedCreateWithoutUsersInput = {
    id?: number
    username: string
    email: string
    active: boolean
    password: string
    auth_roles?: Auth_rolesUncheckedCreateNestedManyWithoutAuthsInput
    tokens?: TokensUncheckedCreateNestedOneWithoutAuthsInput
  }

  export type AuthsCreateOrConnectWithoutUsersInput = {
    where: AuthsWhereUniqueInput
    create: XOR<AuthsCreateWithoutUsersInput, AuthsUncheckedCreateWithoutUsersInput>
  }

  export type AuthsUpsertWithoutUsersInput = {
    update: XOR<AuthsUpdateWithoutUsersInput, AuthsUncheckedUpdateWithoutUsersInput>
    create: XOR<AuthsCreateWithoutUsersInput, AuthsUncheckedCreateWithoutUsersInput>
    where?: AuthsWhereInput
  }

  export type AuthsUpdateToOneWithWhereWithoutUsersInput = {
    where?: AuthsWhereInput
    data: XOR<AuthsUpdateWithoutUsersInput, AuthsUncheckedUpdateWithoutUsersInput>
  }

  export type AuthsUpdateWithoutUsersInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    auth_roles?: Auth_rolesUpdateManyWithoutAuthsNestedInput
    tokens?: TokensUpdateOneWithoutAuthsNestedInput
  }

  export type AuthsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    auth_roles?: Auth_rolesUncheckedUpdateManyWithoutAuthsNestedInput
    tokens?: TokensUncheckedUpdateOneWithoutAuthsNestedInput
  }

  export type Auth_rolesCreateManyAuthsInput = {
    role_id: number
  }

  export type Auth_rolesUpdateWithoutAuthsInput = {
    roles?: RolesUpdateOneRequiredWithoutAuth_rolesNestedInput
  }

  export type Auth_rolesUncheckedUpdateWithoutAuthsInput = {
    role_id?: IntFieldUpdateOperationsInput | number
  }

  export type Auth_rolesUncheckedUpdateManyWithoutAuthsInput = {
    role_id?: IntFieldUpdateOperationsInput | number
  }

  export type TicketsCreateManyEventsInput = {
    id: number
    value?: Decimal | DecimalJsLike | number | string | null
    ticket_type_id?: number | null
  }

  export type TicketsUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticket_user?: Ticket_userUpdateManyWithoutTicketsNestedInput
    ticket_type?: Ticket_typeUpdateOneWithoutTicketsNestedInput
  }

  export type TicketsUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticket_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_user?: Ticket_userUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type TicketsUncheckedUpdateManyWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticket_type_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Auth_rolesCreateManyRolesInput = {
    auth_id: number
  }

  export type Auth_rolesUpdateWithoutRolesInput = {
    auths?: AuthsUpdateOneRequiredWithoutAuth_rolesNestedInput
  }

  export type Auth_rolesUncheckedUpdateWithoutRolesInput = {
    auth_id?: IntFieldUpdateOperationsInput | number
  }

  export type Auth_rolesUncheckedUpdateManyWithoutRolesInput = {
    auth_id?: IntFieldUpdateOperationsInput | number
  }

  export type TicketsCreateManyTicket_typeInput = {
    id: number
    value?: Decimal | DecimalJsLike | number | string | null
    event_id?: bigint | number | null
  }

  export type TicketsUpdateWithoutTicket_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ticket_user?: Ticket_userUpdateManyWithoutTicketsNestedInput
    events?: EventsUpdateOneWithoutTicketsNestedInput
  }

  export type TicketsUncheckedUpdateWithoutTicket_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    event_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    ticket_user?: Ticket_userUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type TicketsUncheckedUpdateManyWithoutTicket_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    event_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type Ticket_userCreateManyTicketsInput = {
    user_id: number
    purchase_date: Date | string
    quantity?: number | null
  }

  export type Ticket_userUpdateWithoutTicketsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Ticket_userUncheckedUpdateWithoutTicketsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Ticket_userUncheckedUpdateManyWithoutTicketsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AuthsCountOutputTypeDefaultArgs instead
     */
    export type AuthsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuthsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventsCountOutputTypeDefaultArgs instead
     */
    export type EventsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolesCountOutputTypeDefaultArgs instead
     */
    export type RolesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Ticket_typeCountOutputTypeDefaultArgs instead
     */
    export type Ticket_typeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Ticket_typeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketsCountOutputTypeDefaultArgs instead
     */
    export type TicketsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Auth_rolesDefaultArgs instead
     */
    export type Auth_rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Auth_rolesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuthsDefaultArgs instead
     */
    export type AuthsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuthsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventsDefaultArgs instead
     */
    export type EventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolesDefaultArgs instead
     */
    export type RolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Ticket_typeDefaultArgs instead
     */
    export type Ticket_typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Ticket_typeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Ticket_userDefaultArgs instead
     */
    export type Ticket_userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Ticket_userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketsDefaultArgs instead
     */
    export type TicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TokensDefaultArgs instead
     */
    export type TokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TokensDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CountriesDefaultArgs instead
     */
    export type CountriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CountriesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}